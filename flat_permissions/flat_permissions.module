<?php

use Drupal\media\MediaInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;

/**
 * Provides access control for media. Policies are defined on the parent Repository Item, or higher in the collection hierarchy
 *
 * @param MediaInterface $media
 * @param string $operation
 * @param AccountInterface $account
 * @return AccessResult
 */
function flat_permissions_media_access(MediaInterface $media, $operation, AccountInterface $account)
{

    if ($operation == "view" || $operation == "download") {

        $referenced_entities = $media->get('field_media_of')->referencedEntities();
        $referenced_ids = [];

        foreach ($referenced_entities as $entity) {
            $referenced_ids[] = $entity->id();
        }

        $parent_nid = $referenced_ids[0]; // There should be only one, we don't support multiple parents
        // Fetch the access policy of the parent or recursively go up in the hierarchy
        $manager = \Drupal::service('flat_permissions.permissions_manager');
        $policy = $manager->fetchAccessPolicy($parent_nid, 'read');

        if (!$policy) {
            // If there's no policy in the hierarchy (shouldn't really be the case), deny access
            return AccessResult::forbidden();
        }

        if (property_exists($policy, "read")) {

            // Get the read rules from the policy
            $read_rules = $policy->read;

            // First, check if there is an "all" rule that applies to all media within the hierarchy
            if (property_exists($policy, "all")) {
                $rule = $policy->all;
                if (property_exists($rule, "roles")) {
                    $allowed_roles = $rule->roles;
                    $user_roles = $account->getRoles();
                    foreach ($user_roles as $user_role) {
                        if (in_array($user_role, $allowed_roles)) {
                            return AccessResult::allowed();
                        }
                    }
                }
                if (property_exists($rule, "users")) {
                    $allowed_users = $rule->users;
                    if (in_array($account->id(), $allowed_users)) {
                        return AccessResult::allowed();
                    }
                }
            }

            // Second, check if there are "mime" rules that apply to specific mime types
            if (property_exists($policy, "types")) {

                $manager = \Drupal::service('flat_permissions.permissions_manager');

                $type_rules = $policy->types;
                foreach ($type_rules as $type_rule) {
                    $mimetypes = $type_rule->mimetypes;
                    $filetypes = $type_rule->filetypes;
                    $media_mimetype = $media->get('field_mime_type')->value;
                    $media_filetype = $manager->mimeToType($media_mimetype);
                    if (in_array($media_mimetype, $mimetypes) || in_array($media_filetype, $filetypes)) {
                        if (property_exists($type_rule, "roles")) {
                            $allowed_roles = $type_rule->roles;
                            $user_roles = $account->getRoles();
                            foreach ($user_roles as $user_role) {
                                if (in_array($user_role, $allowed_roles)) {
                                    return AccessResult::allowed();
                                }
                            }
                        }
                        if (property_exists($type_rule, "users")) {
                            $allowed_users = $type_rule->users;
                            if (in_array($account->id(), $allowed_users)) {
                                return AccessResult::allowed();
                            }
                        }
                    }
                }
            }

            // Finally, check if there are "files" rules that apply to specific media IDs
            if (property_exists($policy, "files")) {
                $files_rules = $policy->files;
                foreach ($files_rules as $file_rule) {
                    // We've named them "file" rules but actually access to files is managed via the media entities,
                    // so we work with the media IDs that link the files to the islandora_object nodes they belong to
                    $media_ids = $file_rule->files;
                    if (in_array($media->id(), $media_ids)) {
                        if (property_exists($file_rule, "roles")) {
                            $allowed_roles = $file_rule->roles;
                            $user_roles = $account->getRoles();
                            foreach ($user_roles as $user_role) {
                                if (in_array($user_role, $allowed_roles)) {
                                    return AccessResult::allowed();
                                }
                            }
                        }
                        if (property_exists($file_rule, "users")) {
                            $allowed_users = $file_rule->users;
                            if (in_array($account->id(), $allowed_users)) {
                                return AccessResult::allowed();
                            }
                        }
                    }
                }
            }
        }

        // If there are no rules that match, access is denied
        return AccessResult::forbidden();
    }
}

function flat_permissions_write_access($nid, AccountInterface $account)
{
    $manager = \Drupal::service('flat_permissions.permissions_manager');
    $policy = $manager->fetchAccessPolicy($nid, 'write');

    $user_roles = $account->getRoles();

    // admin role always has write access
    foreach ($user_roles as $user_role) {
        if ($user_role == 'administrator') {
            return true;
        }
    }

    if (!$policy) {
        // If there's no policy in the hierarchy (shouldn't really be the case), deny access
        return false;
    }

    if (property_exists($policy, "roles")) {
        $allowed_roles = $policy->roles;
        foreach ($user_roles as $user_role) {
            if (in_array($user_role, $allowed_roles)) {
                return true;
            }
        }
    }

    if (property_exists($policy, "users")) {
        $allowed_users = $policy->users;
        if (in_array($account->id(), $allowed_users)) {
            return true;
        }
    }

    // If there are no rules that match, write access is denied
    return false;
}

/**
 * Implements hook_node_access().
 */
function flat_permissions_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account)
{
    ddm('node access called');
    // Check if the operation is 'view'.
    if ($op == 'view') {

        ddm('op is view');

        $type = $node->getType();

        if ($type == 'islandora_object') {

            ddm('islandora_object');
            // If there's any "visible" value in the policy set to true, allow access.
            // If not, check if the user has any of the allowed roles or users

            $manager = \Drupal::service('flat_permissions.permissions_manager');

            $nid = $node->id();

            $policy = $manager->fetchAccessPolicy($nid, 'read');

            if ($manager->objectAndPropertiesExist($policy, 'all->visible')) {
                if ($policy->all->visible == true) {
                    ddm('policy all visible true');
                    return \Drupal\Core\Access\AccessResult::allowed();
                } else {
                    ddm('policy all visible false');
                    $all_invisible = true;
                    if (property_exists($policy->all, "roles")) {
                        $allowed_roles = $policy->all->roles;
                        $user_roles = $account->getRoles();
                        foreach ($user_roles as $user_role) {
                            if (in_array($user_role, $allowed_roles)) {
                                return AccessResult::allowed();
                            }
                        }
                    } elseif (property_exists($policy->all, "users")) {
                        $allowed_users = $policy->all->users;
                        if (in_array($account->id(), $allowed_users)) {
                            return AccessResult::allowed();
                        }
                    }
                }
            }

            if ($manager->objectAndPropertiesExist($policy, 'types')) {
                foreach ($policy->types as $type_rule) {
                    if (property_exists($type_rule, "visible")) {
                        if ($type_rule->visible == true) {
                            return \Drupal\Core\Access\AccessResult::allowed();
                        } else {
                            $all_invisible = true;
                        }
                    } else {
                        $all_invisible = true;
                    }
                }
                if ($all_invisible) {
                    foreach ($policy->types as $type_rule) {
                        if (property_exists($type_rule, "roles")) {
                            $allowed_roles = $type_rule->roles;
                            $user_roles = $account->getRoles();
                            foreach ($user_roles as $user_role) {
                                if (in_array($user_role, $allowed_roles)) {
                                    return AccessResult::allowed();
                                }
                            }
                        } elseif (property_exists($type_rule, "users")) {
                            $allowed_users = $type_rule->users;
                            if (in_array($account->id(), $allowed_users)) {
                                return AccessResult::allowed();
                            }
                        }
                    }
                }
            }

            if ($manager->objectAndPropertiesExist($policy, 'files')) {
                foreach ($policy->files as $file_rule) {
                    if (property_exists($file_rule, "visible")) {
                        if ($file_rule->visible == true) {
                            return \Drupal\Core\Access\AccessResult::allowed();
                        } else {
                            $all_invisible = true;
                        }
                    } else {
                        $all_invisible = true;
                    }
                }
                if ($all_invisible) {
                    foreach ($policy->files as $file_rule) {
                        if (property_exists($file_rule, "roles")) {
                            $allowed_roles = $file_rule->roles;
                            $user_roles = $account->getRoles();
                            foreach ($user_roles as $user_role) {
                                if (in_array($user_role, $allowed_roles)) {
                                    return AccessResult::allowed();
                                }
                            }
                        } elseif (property_exists($file_rule, "users")) {
                            $allowed_users = $file_rule->users;
                            if (in_array($account->id(), $allowed_users)) {
                                return AccessResult::allowed();
                            }
                        }
                    }
                }
            }
        }

        ddm($all_invisible);
        // If access has not been allowed yet at this stage, we'll deny access if all of the rules are set to invisible
        if ($all_invisible) {
            return \Drupal\Core\Access\AccessResult::forbidden();
        }
    }

    // Default to not allowed for other operations.
    return \Drupal\Core\Access\AccessResult::neutral();
}

/**
 * Get the view access policy for the given node.
 * Normally, Repository Items (Parents of the media objects) are viewable by everyone, but this can be overridden
 * in the policy
 *
 * @param string $nid
 * @return boolean
 */
/* function flat_permissions_view_access($nid)
{
    $manager = \Drupal::service('flat_permissions.permissions_manager');
    $policy = $manager->fetchAccessPolicy($nid);
} */

function flat_permissions_theme()
{
    return [
        'flat_permissions_read_policy' => [
            'variables' => ['data' => null],
            'template' => 'flat_permissions_read_policy',
        ],
        'flat_permissions_write_policy' => [
            'variables' => ['data' => null],
            'template' => 'flat_permissions_write_policy',
        ],
    ];
}
