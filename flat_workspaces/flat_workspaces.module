<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;

/**
 * Created by PhpStorm.
 * User: danrhe
 * Date: 07/11/16
 * Time: 16:22
 */

/**
 * Implements hook_stream_wrappers().
 */
/*
function flat_workspaces_stream_wrappers()
{
    return array(
        'local' => array(
            'name' => t('The Local Data Stream'),
            'class' => 'LocalStreamWrapper',
            'description' => t('Stream wrapper for locally stored data'),
            'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
        ),

    );
}
*/

/**
 * Implements hook_permission().
 *
 * setting up permission to use the workspaces module
 *
 */
function flat_workspaces_permission()
{
    return array(
        'use workspaces' => array(
            'title' => t('Use local workspaces'),
            'description' => t('Permission to use local workspace folders for adding resources to bundles')
        ),
    );
}

/**
 * Implements hook_menu().
 */
function flat_workspaces_menu()
{

    $items = array();

    // Admin configuration - Workspaces settings
    $items['admin/config/flat_deposit/workspaces'] = array(
        'title' => 'Workspaces settings',
        'description' => 'Enable the use of local network share workspaces for data upload',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flat_workspaces_admin_form'),
        'file' => 'inc/flat_workspaces.admin_form.inc',
        'access arguments' => array('admin deposit module')
    );

    return $items;
}

/**
 * Implements hook_node_form_alter
 *
 * create form elements for selecting a workspace folder as the source of the files to be added to the bundle
 *
 */
function flat_workspaces_form_node_flat_bundle_form_alter(&$form, FormStateInterface $form_state, $form_id)
{

    hide($form['flat_ws_path']);
    // also hide flat_nc_path, in case the nextcloud module was installed but is not active
    if (isset($form['flat_nc_path'])) {
        hide($form['flat_nc_path']);
    }

    $form['#validate'][] = 'flat_workspaces_flat_bundle_node_form_validate';

    ///////////
    // Add local project directory selection form container element
    // #state attribute makes it only visible if flat_source field is set to 'local'
    ///////////
    $form_state->loadInclude('flat_workspaces', 'inc', 'inc/class.Workspaces');
    // form_load_include($form_state, 'inc', 'flat_workspaces', 'inc/class.Workspaces');
    module_load_include('inc', 'node', 'node.pages');
    $form['workspace_navigation'] = \Workspaces::get_container();

    $workspacesActivated = \Drupal::config('flat_workspaces.settings')->get('activated');
    $departments = \Drupal::config('flat_workspaces.settings')->get('department_mapping');
    $workspacesAllowed = true; //\Drupal::currentUser()->hasPermission('use workspaces');

    if (!$workspacesActivated or !$departments or !$workspacesAllowed) {
        unset($form['flat_source']['widget']['#options']['local']);
        $form['flat_source']['widget'][0]['value']['#default_value'] = NULL;
        unset($form['workspace_navigation']);
        return;
    }

    if (isset($form['workspace_navigation'])) {
        $form_state->loadInclude('node', 'inc', 'node.pages');

        $node = $form_state->getFormObject()->getEntity();
        // if (isset($form['#node'])) {
        // $node = $form['#node'];
        // $wrapper = entity_metadata_wrapper('node', $node);
        // }

        // add original path to values if node is edited and thus original path is already set.
        $flat_original_path = $node->flat_original_path->value;
        if ($flat_original_path) {
            $is_local_original_path = (strpos($flat_original_path, 'local://') === 0);
        }

        if (empty($form_state->getValue(['department'])) and $flat_original_path and $is_local_original_path) {

            $form_state->setValue('flat_ws_path', $flat_original_path);
            $form_state->setRebuild();
        }

        // set the local departments' workspaces folder
        if (!empty($form_state->getValue(['department']))) {

            $department = $form_state->getValue(['department']);
            // keep info if location for data has been chosen and is unchanged
        } elseif (empty($form_state->getValue(['department'])) and $flat_original_path and $is_local_original_path) {

            $path = str_replace('local://', '', $flat_original_path);
            $department = explode('/', $path)[0];
            $form['workspace_navigation']['field']['department']['#default_value'] = $department;
        } else {
            $department = 'none';
        }

        // $config_names = variable_get('flat_workspaces');
        $config = \Drupal::config('flat_workspaces.settings');
        $workspaces_directory = 'local://' . $department . '/' . $config->get('workspace_folder');
        //$workspaces_directory = 'local://tg/' . $config->get('workspace_folder');

        //Scan workspace directory; non-existing directories will return false, existing dirs will populate the
        // workspace field options
        $workspaces = \Workspaces::listAccessibleFolderContent($workspaces_directory, ['isDir', 'userHasReadPermissions', 'webUserHasReadPermissions', 'isNotCurrentDir']);

        if (!empty($workspaces)) {
            $form['workspace_navigation']['field']['workspace']['#options'] = array_combine($workspaces, $workspaces);
            $form['workspace_navigation']['field']['workspace']['#access'] = true;
        } else {
            $form['workspace_navigation']['field']['workspace']['#access'] = true;
            $form['workspace_navigation']['field']['workspace']['#disabled'] = true;
        }

        if (!empty($form_state->getValue(['workspace']))) {
            $workspace = $form_state->getValue(['workspace']);

            // keep info if location for data has been chosen and is unchanged
        } elseif (empty($form_state->getValue(['workspace'])) and $flat_original_path) {

            $path = str_replace('local://', '', $flat_original_path);
            $elements = explode('/', $path);
            $key = array_search('workspaces', $elements);
            $workspace = $elements[$key + 1];
            $form['workspace_navigation']['field']['workspace']['#default_value'] = $workspace;
        } else {
            $workspace = 'none';
        }

        $workspace_root = $workspaces_directory . '/' . $workspace . '/' . $config->get('archive_folder');

        // Get ws path value.
        $current = \Workspaces::get_flat_ws_path($form_state, $workspace_root);

        // (if chosen) extend 'current' directory value with value of next_directories
        if (!empty($form_state->getValue(['next_directories']))) {

            if ($form_state->getValue(['next_directories']) == '..') {

                $current = dirname($current);
            } else {

                $current .= "/" . $form_state->getValue(['next_directories']);
            }

            // unset($form_state['values']['next_directories']);
            $form['workspace_navigation']['field']['next_directories']['#options'] = array();
            $form['workspace_navigation']['field']['next_directories']['#access'] = false;

            $form['workspace_navigation']['field']['next_directories']['#default_value'] = '';
            //$form_state->setInput(['next_directories'], '');
        }

        // alter default value of the flat_ws_path field to attach value of current directory to flat_bundle node
        //$form_state->setValue('flat_ws_path', $current);
        //$form['flat_location']['widget']['#default_value'] = $current;
        //$form_state->setValue('flat_location', $current);
        $form["flat_location"]["widget"][0]["#default_value"] = $current;


        ksm($form);

        // print result to screen
        $form['workspace_navigation']['field']['current_directory']['#markup'] = 'Currently selected folder: <strong><br/>' .
            str_replace('local://', '[Workspaces]/', $current . '</strong><br/><br/>');
        // Add dropdown menu with lower level directories to go into
        $subDirs = \Workspaces::listAccessibleFolderContent($current, ['hasValidDirectoryName', 'isDir', 'userHasWritePermissions', 'webUserHasWritePermissions', 'isNotCurrentDir']);
        if (!empty($subDirs)) {
            $form['workspace_navigation']['field']['next_directories']['#options'] = array_combine($subDirs, $subDirs);
            $form['workspace_navigation']['field']['next_directories']['#access'] = true;
            if (count($subDirs) == 1) {

                if (($flat_original_path != $current) and ($form_state->getValue(['flat_source', 0, 'value']) == 'local')) {

                    // Validate that no other bundle is using same folder

                    $query = \Drupal::entityQuery('node')
                        ->accessCheck(TRUE)
                        ->condition('type', 'flat_bundle')
                        //->condition('uid', $this->info['loggedin_user'])
                        ->condition("flat_original_path.value", $current, "=");

                    // $query = new EntityFieldQuery();
                    // $query->entityCondition('entity_type', 'node')
                    //     ->entityCondition('bundle', 'flat_bundle')
                    //     ->fieldCondition('flat_original_path', 'value', $current, '=')
                    // ;

                    $results = $query->execute();
                    if (empty(!$results)) {

                        $form_state->setErrorByName('next_directories', 'The selected workspace folder is already in use for a different bundle');
                    };
                }

                $form['workspace_navigation']['field']['next_directories']['#title'] = 'Subfolder';
            }
        }
    }
}


function flat_workspaces_flat_bundle_node_form_validate($form, FormStateInterface $form_state)
{

    // Validate that currently selected folder has no subfolders, contains no more than configured maximum files, contains no files that are larger than configured maximum size, contains files with valid names and allowed extensions.
    if ($form_state->getValues(['flat_source', 0, 'value']) == 'local') {
        $dir = $form_state->hasValue(['flat_ws_path', 0, 'value']) ? $form_state->getValues(['flat_ws_path', 0, 'value']) : FALSE;
        if (!$dir or !file_exists(\Drupal::service('file_system')->realpath($dir))) {
            $form_state->setErrorByName('next_directories', 'Please select a valid workspace folder.');
            return $form;
        }
        if ($dir) {
            $errors = array();
            $files = file_scan_directory($dir, '/.*/', array('min_depth' => 0));
            $ingest_service_variables = \Drupal::config('flat_deposit.settings')->get('flat_deposit_ingest_service');
            $max_files = $ingest_service_variables['max_ingest_files'];
            $max_size = $ingest_service_variables['max_file_size'];
            $max_size_bytes = ($max_size * 1073741824);
            $allowed_extensions = explode(', ', $ingest_service_variables['allowed_extensions']);
            $filename_pattern = '/^[\da-zA-Z][\da-zA-Z\._\-]+$/';
            $max_path_length = 4000; // db entries can be 5000 chars but there seems to be some overhead
            if (strlen($dir) > $max_path_length) {

                $form_state->setErrorByName('next_directories', 'The path to reach the specified workspace folder is too long. Move the folder up in the hierearchy to reduce the total path length.');
            }
            if (file_exists(\Drupal::service('file_system')->realpath($dir)) and !empty(glob(\Drupal::service('file_system')->realpath($dir) . '/*', GLOB_ONLYDIR))) {
                $form_state->setErrorByName('next_directories', 'The selected workspace folder contains subfolders.');
                return $form;
            } elseif (count($files) > $max_files) {
                //$form_state->setErrorByName('next_directories', t('The selected workspace folder contains more than !max_files files', ['!max_files' => $max_files]));
                $errors[] = t('The selected workspace folder contains too many files, the maximum is !max_files.', ['!max_files' => $max_files]);
            }
            $max_file_size_exceeded = array();
            $invalid_file_names = array();
            $invalid_file_extensions = array();
            foreach ($files as $file) {
                $path = $file->uri;
                $name = basename($path);
                $size = filesize($path);
                $extension = pathinfo($path, PATHINFO_EXTENSION);
                if ($size > $max_size_bytes) {
                    $max_file_size_exceeded[] = $name;
                }
                if (preg_match($filename_pattern, $name) == FALSE) {
                    $invalid_file_names[] = $name;
                }
                if (!in_array($extension, $allowed_extensions)) {
                    $invalid_file_extensions[] = $name;
                }
            }
            if (!empty($max_file_size_exceeded)) {
                $max_file_size_exceeded_list = implode(", ", $max_file_size_exceeded);
                $errors[] = t('The selected workspace folder contains files that are larger than the maximum allowed file size of !max_size GB: !max_file_size_exceeded_list.', ['!max_size' => $max_size, '!max_file_size_exceeded_list' => $max_file_size_exceeded_list]);
            }
            if (!empty($invalid_file_names)) {
                $invalid_file_names_list = implode(", ", $invalid_file_names);
                $errors[] = t('The selected workspace folder contains files that have disallowed characters in their name: !invalid_file_names_list.', ['!invalid_file_names_list' => $invalid_file_names_list]);
            }
            if (!empty($invalid_file_extensions)) {
                $invalid_file_extensions_list = implode(", ", $invalid_file_extensions);
                $errors[] = t('The selected workspace folder contains files that have a disallowed file extension: !invalid_file_extensions_list. See the deposit manual for allowed file types and extensions.', ['!invalid_file_extensions_list' => $invalid_file_extensions_list]);
            }
            if (!empty($errors)) {
                $form_state->setErrorByName('next_directories', implode('<br>', $errors));
                return $form;
            }
        }

        $query = \Drupal::entityQuery('node')
            ->accessCheck(TRUE)
            ->condition('type', 'flat_bundle')
            //->condition('uid', $this->info['loggedin_user'])
            ->condition("flat_original_path.value", $dir, "=");

        // $query = new EntityFieldQuery();
        // $query->entityCondition('entity_type', 'node')
        //     ->entityCondition('bundle', 'flat_bundle')
        //     ->fieldCondition('flat_original_path', 'value', $dir, '=')
        // ;

        $result = $query->execute();

        if (empty(!$result)) {
            // if result is current node itself (when modifying it), that is fine
            $nid = array_keys($result['node']);
            $nid = (string)$nid[0];

            if ($nid !== $form_state->getValues(['nid'])) {

                $form_state->setErrorByName('next_directories', 'The selected workspace folder is already in use for a different bundle.');
            }
        }
    }
}

function flat_workspaces_node_view(array &$build, Node $node, EntityViewDisplay $display, $view_mode)
{

    /*     $type = $node->getType();

    if ($type == 'flat_bundle' and $view_mode == 'full' and node_is_page($node)) {

        // $wrapper = entity_metadata_wrapper('node', $node);

        if ($node->flat_source->value == 'local') {
            $path = $node->content['flat_original_path'][0]['#markup'];
            $path = str_replace('local://', '', $path);
            $path = str_replace('external://', '', $path);
            $path = str_replace('freeze://', '[protected folder on server]', $path);
            $node->content['flat_original_path'][0]['#markup'] = $path;
        }
    } */
}

/**
 * Implements hook_node_presave()
 *
 * get value from flat_ws_path and set flat_original_path and flat_location to that value
 *
 * note! also gets called during node delete and metadata save, hence the extra checks
 *
 */
/* function flat_workspaces_node_presave(EntityInterface $node)
{
    if ($node instanceof \Drupal\node\NodeInterface) {
        if ($node->bundle() === 'flat_bundle') {
            $flat_source = $node->get('flat_source')->value;
            if ($flat_source == 'local') {
                $flat_ws_path = $node->get('flat_ws_path')->value;
                ksm($flat_ws_path);
                $node->set('flat_original_path', $flat_ws_path);
                $node->set('flat_location', $flat_ws_path);
            }
        }
    }
} */
