<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\facets\Entity\Facet;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\search_api\Query\QueryInterface;
use Drupal\views\ViewExecutable;
use Drupal\facets\FacetSource\FacetSourcePluginInterface;
use Drupal\search_api\Entity\Index;
use Drupal\facets\FacetManager\DefaultFacetManager;
use Drupal\facets\FacetInterface;
use Drupal\facets\FacetSource\FacetSourcePluginManager;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityRepositoryInterface;
use Drupal\facets\FacetManagerInterface;


/**
 * @file
 * Primarily Drupal hooks and global API functions setup the example.
 *
 * This is the main module file for the view_actions example.
 * It implements :
 *  hook_views_api() : register this module with views api and set path
 *
 *
 */

/**
 * Implements hook_views_api().
 * register with views api
 * declare the path where to find the view include files
 *
 */


/**
 * Implements hook_menu().
 */
function flat_views_menu()
{
  $items = array();
  $items['dashboard/%user/notifications/delete_all_confirm'] = array(
    'title' => 'Delete all notifications',
    'type' => MENU_CALLBACK,
    'page callback' => 'flat_views_notifications_delete_all',
    'page arguments' => array(1),
    'access arguments' => array('use deposit module', 1),
  );

  return $items;
}

function flat_views_notifications_delete_all($form, FormStateInterface $form_state, $user)
{

  $a = 2;
  return  confirm_form(
    array(),
    t('Are you sure you want to delete all reports?'),
    'dashboard/' . $user->getAccountName() . 'notifications',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

function flat_views_notifications_delete_all_submit($user)
{

  \Drupal::messenger()->addMessage('Done');
}

function flat_views_views_api()
{

  $views_registration = array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'flat_views') . '/views',
  );


  return $views_registration;
}


/**
 * Implements hook_block_info().
 */
function flat_views_block_info()
{
  $blocks = array();


  $blocks['reports_actions'] = array(
    'info' => t('FLAT deposit reports actions '),
    'status' => TRUE,
    'weight' => 999,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'dashboard/*/notifications'
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function flat_views_block_view($delta = '')
{

  switch ($delta) {
    case 'reports_actions':

      if (Drupal::currentUser()->hasPermission('use deposit module')) {

        module_load_include('inc', 'flat_views', 'includes/flat_reports.actions_form');

        $form = drupal_get_form('flat_reports_action_form');
        $rendered_form = drupal_render($form);

        $block = array(
          'subject' => '',
          'content' => $rendered_form,
        );
        break;
      }
  }

  return $block;
}




/**
 * Implements hook_block_info_alter().
 *
 * Alter visibility of in views defined blocks for report, bundles and collections
 */
function flat_views_block_info_alter(&$blocks, $theme, $code_blocks)
{

  foreach ($blocks['views'] as &$view_block) {

    $block_description = $view_block['info'];
    switch ($block_description) {
      case "Flat user notifications":
        $view_block['region'] = 'content';
        $view_block['visibility'] = BLOCK_VISIBILITY_LISTED;
        $view_block['pages'] = 'dashboard/*/notifications';
        $view_block['status'] = TRUE;
        break;

      case "FLAT my bundles":
        $view_block['region'] = 'content';
        $view_block['visibility'] = BLOCK_VISIBILITY_LISTED;
        $view_block['pages'] = "dashboard/*/bundles";
        $view_block['status'] = TRUE;
        break;

      case "FLAT my collections":
        $view_block['region'] = 'content';
        $view_block['visibility'] = BLOCK_VISIBILITY_LISTED;
        $view_block['pages'] = 'dashboard/*/collections';
        $view_block['status'] = TRUE;
        break;
    }
  }
}



/**
 * Trigger a facet query that filters on descendent_of the current node
 * such that all facet values are restricted to descendent of the current node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node entity to use in the facet query.
 */
function trigger_facet_query_programmatically(NodeInterface $node)
{

  // Get the facet source ID for the facet tied to your Search API index or view.
  $facet_source_id = 'search_api:views_page__solr_search_content__page_1'; // Replace with your actual facet source ID.

  // Load the Facet Source plugin manager.
  /** @var \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_manager */
  $facet_source_manager = \Drupal::service('plugin.manager.facets.facet_source');

  // Load the facet source plugin.
  $facet_source = $facet_source_manager->createInstance($facet_source_id);


  if ($facet_source) {
    // Get the facets tied to this facet source.
    $facet_manager = \Drupal::service('facets.manager');
    $facets = $facet_manager->getFacetsByFacetSourceId($facet_source_id);

    // Loop through facets and find the one matching 'descendent_of_search'.
    foreach ($facets as $facet) {

      if ($facet->id() === 'descendant_of_search') {

        // Set the current node's ID as the active item
        $facet->setActiveItem($node->id());
      }
    }
  } else {
    \Drupal::logger('flat_views')->error('Facet source not found for source ID: @facet_source_id', ['@facet_source_id' => $facet_source_id]);
  }
}


/**
 * Implements hook_node_view().
 *
 * When on a repository item page, call above function to trigger the facet query for the current node.
 *
 * @param array $build
 *   The build array.
 * @param \Drupal\node\NodeInterface $node
 *   The node entity.
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 *   The entity view display.
 * @param string $view_mode
 *   The view mode.
 */
function flat_views_node_view(array &$build, \Drupal\node\NodeInterface $node, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode)
{
  // Check if the node is of the islandora_object content type
  if ($node->bundle() == 'islandora_object') {
    // Call the function to trigger the facet query programmatically.
    trigger_facet_query_programmatically($node);
  }
}

/**
 * Implements hook_plugin_type_info().
 */
function flat_views_plugin_type_info()
{
  $info['search_query_processor']['custom_facets_query_processor'] = [
    'class' => 'Drupal\custom_facets\Plugin\Search\CustomFacetsQueryProcessor',
    'label' => t('Custom Facets Query Processor'),
    'description' => t('Handles custom facet queries with include/exclude functionality.'),
  ];
  return $info;
}

/**
 * Implements hook_library_info_build().
 */
function flat_views_library_info_build()
{
  $libraries['flat_views'] = [
    'version' => '1.0',
    'css' => [
      'theme' => [
        'css/custom_facets.css' => [],
      ],
    ],
    'js' => [
      'js/custom_facets.js' => [],
    ],
  ];
  return $libraries;
}


/**
 * Implements hook_preprocess_facets_item_list().
 */
function flat_views_preprocess_facets_item_list(&$variables)
{

  $facet_id = $variables['facet']->id();

  if (str_contains($facet_id, 'include')) {

    $items = &$variables['items'];

    $exclude_facet_id = str_replace('include', 'exclude', $facet_id);

    if (isset($items)) {

      foreach ($items as $key => &$item) {

        $exclude_query_params = [
          'f[0]' => $exclude_facet_id . ':' . $item['value']['#attributes']['data-drupal-facet-item-value'],
        ];
        $exclude_url = Url::fromUri('internal:/search', [
          'query' => $exclude_query_params,
        ]);

        $item['exclude'] = '<span class="facet-sign"><a href="' . $exclude_url->toString() . '">-</a></span>';
      }
    }
  }
}


/**
 * Implements hook_theme_registry_alter().
 */
function flat_views_theme_registry_alter(&$theme_registry)
{
  // Replace 'example_template' with the actual theme hook name.
  if (isset($theme_registry['facets_item_list'])) {
    // Use the extension service to get the module path.
    $module_handler = \Drupal::service('extension.list.module');
    $module_path = $module_handler->getPath('flat_views');

    // Set the 'template' key to just the filename without the extension.
    $theme_registry['facets_item_list']['template'] = 'facets-item-list';

    // Set the 'path' to the directory where the template is located.
    $theme_registry['facets_item_list']['path'] = $module_path . '/templates';
  }
}
