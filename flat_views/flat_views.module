<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\facets\Entity\Facet;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\search_api\Query\QueryInterface;
use Drupal\views\ViewExecutable;



/**
 * @file
 * Primarily Drupal hooks and global API functions setup the example.
 *
 * This is the main module file for the view_actions example.
 * It implements :
 *  hook_views_api() : register this module with views api and set path
 *
 *
 */

/**
 * Implements hook_views_api().
 * register with views api
 * declare the path where to find the view include files
 *
 */


/**
 * Implements hook_menu().
 */
function flat_views_menu()
{
    $items = array();
    $items['dashboard/%user/notifications/delete_all_confirm'] = array(
        'title' => 'Delete all notifications',
        'type' => MENU_CALLBACK,
        'page callback' => 'flat_views_notifications_delete_all',
        'page arguments' => array(1),
        'access arguments' => array('use deposit module', 1),
    );

    return $items;
}

function flat_views_notifications_delete_all($form, FormStateInterface $form_state, $user)
{

    $a = 2;
    return  confirm_form(
        array(),
        t('Are you sure you want to delete all reports?'),
        'dashboard/' . $user->getAccountName() . 'notifications',
        t('This action cannot be undone.'),
        t('Delete'),
        t('Cancel')
    );
}

function flat_views_notifications_delete_all_submit($user)
{

    \Drupal::messenger()->addMessage('Done');
}

function flat_views_views_api()
{

    $views_registration = array(
        'api' => '3.0',
        'path' => drupal_get_path('module', 'flat_views') . '/views',
    );


    return $views_registration;
}


/**
 * Implements hook_block_info().
 */
function flat_views_block_info()
{
    $blocks = array();


    $blocks['reports_actions'] = array(
        'info' => t('FLAT deposit reports actions '),
        'status' => TRUE,
        'weight' => 999,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'dashboard/*/notifications'
    );

    return $blocks;
}


/**
 * Implements hook_block_view().
 */
function flat_views_block_view($delta = '')
{

    switch ($delta) {
        case 'reports_actions':

            if (Drupal::currentUser()->hasPermission('use deposit module')) {

                module_load_include('inc', 'flat_views', 'includes/flat_reports.actions_form');

                $form = drupal_get_form('flat_reports_action_form');
                $rendered_form = drupal_render($form);

                $block = array(
                    'subject' => '',
                    'content' => $rendered_form,
                );
                break;
            }
    }

    return $block;
}




/**
 * Implements hook_block_info_alter().
 *
 * Alter visibility of in views defined blocks for report, bundles and collections
 */
function flat_views_block_info_alter(&$blocks, $theme, $code_blocks)
{

    foreach ($blocks['views'] as &$view_block) {

        $block_description = $view_block['info'];
        switch ($block_description) {
            case "Flat user notifications":
                $view_block['region'] = 'content';
                $view_block['visibility'] = BLOCK_VISIBILITY_LISTED;
                $view_block['pages'] = 'dashboard/*/notifications';
                $view_block['status'] = TRUE;
                break;

            case "FLAT my bundles":
                $view_block['region'] = 'content';
                $view_block['visibility'] = BLOCK_VISIBILITY_LISTED;
                $view_block['pages'] = "dashboard/*/bundles";
                $view_block['status'] = TRUE;
                break;

            case "FLAT my collections":
                $view_block['region'] = 'content';
                $view_block['visibility'] = BLOCK_VISIBILITY_LISTED;
                $view_block['pages'] = 'dashboard/*/collections';
                $view_block['status'] = TRUE;
                break;
        }
    }

    #var_dump($blocks['views']);
}

/*
function flat_views_preprocess_facet_block(&$variables)
{
    if ($variables['plugin_id'] == 'facet_block:read_access_policy_facets') {
        if (isset($variables['elements']['content'][0]['#items'])) {
            foreach ($variables['elements']['content'][0]['#items'] as &$facet_item) {

                ddm($facet_item);

                $query = $facet_item['#url']->getOption('query');

                // Create a new URL object pointing to the search results page.
                $new_url = Url::fromRoute('view.solr_search_content.page_1', [], ['query' => $query]);

                // Replace the original URL with the new one.
                $facet_item['#url'] = $new_url;

                ddm($facet_item);
            }
        }
    }
}

function flat_views_page_attachments(array &$page)
{
    // Get the current route name.
    $route_name = \Drupal::routeMatch()->getRouteName();

    // Log the route name to the Drupal log (dblog).
    \Drupal::logger('flat_views')->notice('Current route: ' . $route_name);

    // Optionally, display a message on the page (for debugging purposes).
    // \Drupal::messenger()->addMessage('Current route: ' . $route_name);
}

function flat_views_preprocess_facet(array &$variables)
{
    foreach ($variables['items'] as &$facet_item) {
        // Get the current query parameters to retain the facet selection.
        $query = $facet_item['#url']->getOption('query');

        // Create a new URL object pointing to the search results page.
        $new_url = Url::fromRoute('view.solr_search_content.page_1', [], ['query' => $query]);

        // Replace the original URL with the new one.
        $facet_item['#url'] = $new_url;
    }
}
*/

function flat_views_views_post_execute(ViewExecutable $view)
{
    // Check the view ID and display ID to target the correct view.
    if ($view->id() == 'facet_sum' && $view->current_display == 'block_1') {
        // Loop through the view results.
        foreach ($view->result as &$row) {
            if (isset($row->_entity) && $row->_entity->hasField('field_file_size') && !$row->_entity->get('field_file_size')->isEmpty()) {
                $row->_entity->field_file_size->value = (int) $row->_entity->field_custom_text->value * 2;
            }
        }
    }
}

/**
 * Implements hook_block_view_alter().
 */
function flat_views_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
    // Check if the block is the facets block by its machine name.
    dpm($block->getDerivativeId());
    if ($block->getDerivativeId() === 'read_access_policy_search') {
      // Get the current route match service.
      $route_match = \Drupal::routeMatch();
      $node = $route_match->getParameter('node');

      // Check if we are on the search results page.
      $current_path = \Drupal::service('path.current')->getPath();

      // Adjust the path for your search results page.
      // Assuming the search results page path is '/search'.
      if ($current_path == '/search') {
        // Allow the facets block to display on the search results page.
        return;
      }

      // Check if we are on a node page and if it's of the desired content type.
      if ($node instanceof \Drupal\node\NodeInterface) {
        $content_type = $node->bundle();

        // Show the block only on nodes of a specific content type (e.g., 'article').
        if ($content_type === 'islandora_object') {
          return; // Keep the block if the content type is 'article'.
        }
      }

      // If not the search page or the specific content type, remove the block.
      unset($build);
    }
  }


/* function flat_views_preprocess_facets_item_list(&$variables)
{
    $custom_view_path = '/search';

    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
        $nid = $node->id();
    }

    // Hide registration link for the authenticated user.
    $items = &$variables['items'];
    foreach ($items as $key => &$item) {

        $options = $item['value']['#url']->getOptions();
        $item['value']['#url'] = Url::fromUri('internal:' . $custom_view_path, $options);
        if ($nid) {
            $item['value']['#url']->mergeOptions(['query' => ['f' => ['descendant_of:' . $nid]]]);
        }
    }
} */
