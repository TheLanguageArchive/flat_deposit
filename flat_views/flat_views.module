<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\facets\Entity\Facet;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\search_api\Query\QueryInterface;
use Drupal\views\ViewExecutable;
use Drupal\facets\FacetSource\FacetSourcePluginInterface;
use Drupal\search_api\Entity\Index;
use Drupal\facets\FacetManager\DefaultFacetManager;
use Drupal\facets\FacetInterface;
use Drupal\facets\FacetSource\FacetSourcePluginManager;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;

/**
 * @file
 * Primarily Drupal hooks and global API functions setup the example.
 *
 * This is the main module file for the view_actions example.
 * It implements :
 *  hook_views_api() : register this module with views api and set path
 *
 *
 */

/**
 * Implements hook_views_api().
 * register with views api
 * declare the path where to find the view include files
 *
 */


/**
 * Implements hook_menu().
 */
function flat_views_menu()
{
    $items = array();
    $items['dashboard/%user/notifications/delete_all_confirm'] = array(
        'title' => 'Delete all notifications',
        'type' => MENU_CALLBACK,
        'page callback' => 'flat_views_notifications_delete_all',
        'page arguments' => array(1),
        'access arguments' => array('use deposit module', 1),
    );

    return $items;
}

function flat_views_notifications_delete_all($form, FormStateInterface $form_state, $user)
{

    $a = 2;
    return  confirm_form(
        array(),
        t('Are you sure you want to delete all reports?'),
        'dashboard/' . $user->getAccountName() . 'notifications',
        t('This action cannot be undone.'),
        t('Delete'),
        t('Cancel')
    );
}

function flat_views_notifications_delete_all_submit($user)
{

    \Drupal::messenger()->addMessage('Done');
}

function flat_views_views_api()
{

    $views_registration = array(
        'api' => '3.0',
        'path' => drupal_get_path('module', 'flat_views') . '/views',
    );


    return $views_registration;
}


/**
 * Implements hook_block_info().
 */
function flat_views_block_info()
{
    $blocks = array();


    $blocks['reports_actions'] = array(
        'info' => t('FLAT deposit reports actions '),
        'status' => TRUE,
        'weight' => 999,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'dashboard/*/notifications'
    );

    return $blocks;
}


/**
 * Implements hook_block_view().
 */
function flat_views_block_view($delta = '')
{

    switch ($delta) {
        case 'reports_actions':

            if (Drupal::currentUser()->hasPermission('use deposit module')) {

                module_load_include('inc', 'flat_views', 'includes/flat_reports.actions_form');

                $form = drupal_get_form('flat_reports_action_form');
                $rendered_form = drupal_render($form);

                $block = array(
                    'subject' => '',
                    'content' => $rendered_form,
                );
                break;
            }
    }

    return $block;
}




/**
 * Implements hook_block_info_alter().
 *
 * Alter visibility of in views defined blocks for report, bundles and collections
 */
function flat_views_block_info_alter(&$blocks, $theme, $code_blocks)
{

    foreach ($blocks['views'] as &$view_block) {

        $block_description = $view_block['info'];
        switch ($block_description) {
            case "Flat user notifications":
                $view_block['region'] = 'content';
                $view_block['visibility'] = BLOCK_VISIBILITY_LISTED;
                $view_block['pages'] = 'dashboard/*/notifications';
                $view_block['status'] = TRUE;
                break;

            case "FLAT my bundles":
                $view_block['region'] = 'content';
                $view_block['visibility'] = BLOCK_VISIBILITY_LISTED;
                $view_block['pages'] = "dashboard/*/bundles";
                $view_block['status'] = TRUE;
                break;

            case "FLAT my collections":
                $view_block['region'] = 'content';
                $view_block['visibility'] = BLOCK_VISIBILITY_LISTED;
                $view_block['pages'] = 'dashboard/*/collections';
                $view_block['status'] = TRUE;
                break;
        }
    }
}



/**
 * Trigger a facet query that filters on descendent_of the current node
 * such that all facet values are restricted to descendent of the current node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node entity to use in the facet query.
 */
function trigger_facet_query_programmatically(NodeInterface $node) {

  // Get the facet source ID for the facet tied to your Search API index or view.
  $facet_source_id = 'search_api:views_page__solr_search_content__page_1'; // Replace with your actual facet source ID.

  // Load the Facet Source plugin manager.
  /** @var \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_manager */
  $facet_source_manager = \Drupal::service('plugin.manager.facets.facet_source');

  // Load the facet source plugin.
  $facet_source = $facet_source_manager->createInstance($facet_source_id);


  if ($facet_source) {
    // Get the facets tied to this facet source.
    $facet_manager = \Drupal::service('facets.manager');
    $facets = $facet_manager->getFacetsByFacetSourceId($facet_source_id);

    // Loop through facets and find the one matching 'descendent_of'.
    foreach ($facets as $facet) {

    //dpm($facet);
      /** @var \Drupal\facets\FacetInterface $facet */

      // We are specifically targeting the facet called 'descendent_of_search'.
      if ($facet->id() === 'descendant_of_search') {

        // Set the current node's ID as the active item for the 'descendent_of_search' facet.
        $facet->setActiveItem($node->id());
      }
    }
  } else {
    \Drupal::logger('flat_views')->error('Facet source not found for source ID: @facet_source_id', ['@facet_source_id' => $facet_source_id]);
  }
}


/**
 * Implements hook_node_view().
 *
 * When on a repository item page, call above function to trigger the facet query for the current node.
 *
 * @param array $build
 *   The build array.
 * @param \Drupal\node\NodeInterface $node
 *   The node entity.
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 *   The entity view display.
 * @param string $view_mode
 *   The view mode.
 */
function flat_views_node_view(array &$build, \Drupal\node\NodeInterface $node, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
    // Check if the node is of the islandora_object content type
    if ($node->bundle() == 'islandora_object') {
      // Call the function to trigger the facet query programmatically.
      trigger_facet_query_programmatically($node);
    }
  }

/**
 * Implements hook_plugin_type_info().
 */
function flat_views_plugin_type_info() {
    $info['search_query_processor']['custom_facets_query_processor'] = [
      'class' => 'Drupal\custom_facets\Plugin\Search\CustomFacetsQueryProcessor',
      'label' => t('Custom Facets Query Processor'),
      'description' => t('Handles custom facet queries with include/exclude functionality.'),
    ];
    return $info;
  }

/**
 * Custom submit handler to process facet values.
 */
function flat_views_facet_submit($form, FormStateInterface $form_state) {
    // Capture the selected facets.
    $facet_values = [];
    foreach ($form['facets'] as $facet_name => $facet) {
        foreach ($facet['#options'] as $value => $option) {
            $facet_values[$facet_name][$value] = [
                'include' => !empty($option['include']),
                'exclude' => !empty($option['exclude']),
            ];
        }
    }

    // Save or pass these values to your custom query processor.
    // This would typically involve setting them in the state or a session.
    \Drupal::service('session')->set('custom_facets_values', $facet_values);
}


/**
 * Implements hook_library_info_build().
 */
function flat_views_library_info_build() {
    $libraries['flat_views'] = [
        'version' => '1.0',
        'css' => [
            'theme' => [
                'css/custom_facets.css' => [],
            ],
        ],
        'js' => [
            'js/custom_facets.js' => [],
        ],
    ];
    return $libraries;
}

/**
 * Implements hook_preprocess_facets_item_list().
 *
 * Changes the facet URLs to always point to the search results page and include any
 * "descendant_of" query parameter to restrict the search to the current collection.
 *
 * @param array $variables
 *   The variables that are passed to the template.
 */
/* function flat_views_preprocess_facets_item_list(&$variables)
{
    $nid = NULL;

    $custom_view_path = '/search';

    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
        $nid = $node->id();
    }

    $items = &$variables['items'];
    foreach ($items as $key => &$item) {

        $options = $item['value']['#url']->getOptions();
        $item['value']['#url'] = Url::fromUri('internal:' . $custom_view_path, $options);
        if ($nid) {
            $item['value']['#url']->mergeOptions(['query' => ['f' => ['descendant_of_search:' . $nid]]]);
        }
        $item['include'] = '<span class="facet-sign">+</span>';
        $item['exclude'] = '<span class="facet-sign">-</span>';
    }

    //dpm($item);

    $variables['#attached']['library'][] = 'flat_views/flat_views';
} */

/**
 * Implements hook_preprocess_facets_item_list().
 */
function flat_views_preprocess_facets_item_list(&$variables) {

    dpm($variables['facet']->getFacetSourceId());
    // Check if this is the facet you want to modify.
    if ($variables['facet']->id() == 'read_access_policy_search') {

        $nid = NULL;

    $custom_view_path = '/search';

    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
        $nid = $node->id();
    }

      // Define facet machine names for inclusive and exclusive facets.
      $inclusive_facet_name = 'read_access_policy_search';
      $exclusive_facet_name = 'read_access_policy_search_exclusive';

      // Initialize arrays to hold facet items from inclusive and exclusive facets.
      $inclusive_items = [];
      $exclusive_items = [];

      // Check for the inclusive facet.
      if ($variables['facet']->id() === $inclusive_facet_name) {
        $inclusive_items = $variables['items'];
      }

      // Check for the exclusive facet.
      if ($variables['facet']->id() === $exclusive_facet_name) {
        $exclusive_items = $variables['items'];
      }

      // Combine the inclusive and exclusive facet results.
      $combined_results = [];

      // Process inclusive facet items.
      foreach ($inclusive_items as $item) {
        $display_value = $item['#markup']; // Assuming 'label' or 'markup' holds the display value.
        $combined_results[$display_value]['inclusive'] = [
          'label' => $display_value,
          'inclusive_url' => $item['#url']->toString(),
        ];
      }

      // Process exclusive facet items.
      foreach ($exclusive_items as $item) {
        $display_value = $item['#markup'];
        $combined_results[$display_value]['exclusive'] = [
          'label' => $display_value,
          'exclusive_url' => $item['#url']->toString(),
        ];
      }

      // Prepare the final list of items for rendering.
      $variables['items'] = [];
      foreach ($combined_results as $value => $types) {
        $inclusive_url = isset($types['inclusive']['inclusive_url']) ? $types['inclusive']['inclusive_url'] : '#';
        $exclusive_url = isset($types['exclusive']['exclusive_url']) ? $types['exclusive']['exclusive_url'] : '#';

        // Append both "+" and "-" links for each value.
        $variables['items'][] = [
          '#markup' => $value,
          '#inclusive_url' => $inclusive_url,
          '#exclusive_url' => $exclusive_url,
        ];
      }
    }
  }

/**
 * Loads the facet items for a given facet machine name.
 */
function flat_views_load_facet_items($facet_machine_name) {
    // Load the facet configuration entity.
    $facet = \Drupal::entityTypeManager()->getStorage('facets_facet')->load($facet_machine_name);
    if (!$facet) {
      return [];
    }

    // Get the facet source plugin.
    $facet_source_plugin = $facet->getFacetSource()->getPlugin();

    // Rebuild the query and process the facet results.
    $query = $facet_source_plugin->getQuery();
    $query->execute();

    // Process the facet results through the processor.
    \Drupal::service('facets.manager')->build($facet);

    // Collect the items from the processed facet results.
    $facet_items = [];
    foreach ($facet->getProcessedResults() as $result) {
      $facet_items[] = [
        '#markup' => $result->getDisplayValue(),
        '#url' => $result->getUrl(),
      ];
    }

    return $facet_items;
  }

/**
 * Implements hook_theme_registry_alter().
 */
function flat_views_theme_registry_alter(&$theme_registry) {
  // Replace 'example_template' with the actual theme hook name.
  if (isset($theme_registry['facets_item_list'])) {
    // Use the extension service to get the module path.
    $module_handler = \Drupal::service('extension.list.module');
    $module_path = $module_handler->getPath('flat_views');

    // Set the 'template' key to just the filename without the extension.
    $theme_registry['facets_item_list']['template'] = 'facets-item-list';

    // Set the 'path' to the directory where the template is located.
    $theme_registry['facets_item_list']['path'] = $module_path . '/templates';

  }
}

/**
 * Implements hook_preprocess_block().
 */
function flat_views_preprocess_block(&$variables) {
    if ($variables['configuration']['provider'] == 'facets') {
        // Check if this is the specific facet block you're targeting.
  //if ($variables['base_plugin_id'] === 'views_block') { // && $variables['elements']['#facet']->getName() == 'read_access_policy_search') {

    //dpm('hook block preprocess');

    // Load the two facets (inclusive and exclusive) by machine name.
    $inclusive_facet = Facet::load('read_access_policy_search'); // Replace 'facet_inclusive' with your actual facet machine name.
    $exclusive_facet = Facet::load('read_access_policy_search_exclusive'); // Replace 'facet_exclusive' with your actual facet machine name.

/*     // Get the results for both facets.
    $inclusive_results = $inclusive_facet->getResults();
    $exclusive_results = $exclusive_facet->getResults();

    // Combine the facets by display value.
    $combined_results = [];

    foreach ($inclusive_results as $result) {
      $display_value = $result->getDisplayValue();
      $combined_results[$display_value]['inclusive'] = [
        'label' => $display_value . ' +',
        'url' => $result->getUrl()->toString(),
      ];
    }

    foreach ($exclusive_results as $result) {
      $display_value = $result->getDisplayValue();
      $combined_results[$display_value]['exclusive'] = [
        'label' => $display_value . ' -',
        'url' => $result->getUrl()->toString(),
      ];
    }

    // Prepare the final results array for rendering.
    $final_results = [];
    foreach ($combined_results as $value => $types) {
      $inclusive_url = isset($types['inclusive']) ? $types['inclusive']['url'] : '#';
      $exclusive_url = isset($types['exclusive']) ? $types['exclusive']['url'] : '#';

      $final_results[] = [
        'label' => $value,
        'inclusive_url' => $inclusive_url,
        'exclusive_url' => $exclusive_url,
      ];
    }

    // Pass the combined results to the template.
    $variables['content']['#items'] = $final_results */
  }
}





