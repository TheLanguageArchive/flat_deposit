<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\system\Entity\Menu;

/**
 * Implements hook_theme().
 */
function flat_deposit_theme()
{

    $themes = [

        'image_link' => [
            'variables' => [
                'link' => [
                    'text' => 'Link text',
                    'path' => 'path/to/ref',
                    'options' => [
                        'attributes' => [],
                        'html' => false,
                    ],
                ],
                'image' => [
                    'path' => $GLOBALS['base_url'] . '/sites/all/themes/flat_bootstrap_theme/favicon.ico',
                    'alt' => 'Image title',
                    'title' => 'image title',
                    'attributes' => [],
                ],
            ],
        ],

        'flat_collection_form_table' => [
            'render element' => 'form',
        ],

        'flat_bundle_action_table' => [
            'render element' => 'form',
        ],
        'flat_bundle_cmdi_resource_table' => [
            'render element' => 'form',
        ],

        'flat_modal' => [
            'template' => 'flat-modal',
            'variables' => [],
        ],

        'flat_modal_error' => [
            'template' => 'flat-modal-error',
            'variables' => [],
        ],

        'flat_modal_loader' => [
            'template' => 'flat-modal-loader',
            'variables' => [],
        ],

        'flat_modal_blank' => [
            'template' => 'flat-modal-blank',
            'variables' => [],
        ],

        'flat_modal_success' => [

            'template' => 'flat-modal-success',
            'variables' => [

                'title' => 'Title',
                'description' => 'Description',
            ],
        ],

        'flat_modal_confirm' => [
            'template' => 'flat-modal-confirm',
            'variables' => [
                'title' => 'Title',
                'description' => 'Description',
                'cmdi_id' => 'CMDI id',
            ]
        ],

        'flat_modal_confirm_delete' => [
            'template' => 'flat-modal-confirm-delete',
            'variables' => [
                'title' => 'Title',
                'description' => 'Description',
            ]
        ],

        'flat_actions' => [
            'template' => 'flat-actions',
            'variables' => [
                'cmdi_id' => null,
                'component_id' => null,
                'available_templates' => null,
                'cmdi_data' => null,
            ],
        ],
    ];

    return $themes;
}

/**
 * Altering theme registry to register the panel actions
 * that is defined by our CMDI template builder
 *
 * @param array $theme_registry drupal's theme registry
 *
 * @return void
 */
function flat_deposit_theme_registry_alter(&$theme_registry)
{
    if (isset($theme_registry['bootstrap_panel'])) {
        $theme_registry['bootstrap_panel']['preprocess functions'][] = 'flat_deposit_preprocess_bootstrap_panel';
    }
}

/**
 * Bootstrap panel preprocessor to register the panel actions
 * provided by element to be used inside the template file.
 *
 * @param array $variables
 *
 * @return void
 */
function flat_deposit_preprocess_bootstrap_panel(&$variables)
{

    if (isset($variables['element'])) {

        $element = &$variables['element'];

        // check for actions
        $variables['panel_actions'] = null;
        if (isset($element['#panel_actions'])) {
            $variables['panel_actions'] = $element['#panel_actions'];
        }
    }
}

function flat_deposit_get_user_active_collections(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable)
{

    $options = [];

    $user = \Drupal::currentUser();
    $userId = $user->id();

    $query = \Drupal::entityQuery('node')
        ->accessCheck(TRUE)
        ->condition('type', 'flat_collection')
        ->condition('uid', $userId);
    //->condition("flat_fid.value", "NULL", "!=");

    $entities = $query->execute();

    if (!empty($entities)) {
        foreach ($entities as $entity) {
            $collection_node = \Drupal::entityTypeManager()->getStorage('node')->load($entity);
            $title = $collection_node->getTitle();
            $options[$entity] = $title;
        }
    }

    return $options;
}

/**
 * Implements hook_form().
 *
 *  Flat_bundle add/edit form.
 */
function flat_bundle_form($node, $form_state)
{

    //var_dump('test');exit;
    return node_content_form($node, $form_state);
}


/**
 * Implements hook_form_FORMID_alter().
 *
 * Changes visibility and accessibility of certain node fields and adds collection-selection options based on users membership.
 */
function flat_deposit_form_node_flat_bundle_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    // dd($form);
    if (isset($form['additional_settings'])) {
        $form['additional_settings']['#access'] = false;
    }

    if (isset($form['revision_information'])) {
        $form['revision_information']['#access'] = false;
    }

    // Remove after next install.
    $form['flat_parent_nid_bundle']['#required'] = false;

    $form['flat_policies']['#description'] = t('Select which access policy should be applied to the files within this bundle. "Public" materials can be accessed by anyone without having to log in. "Authenticated Users" means any user with a valid account for the archive. "Academic Users" are users that log in with an academic account or whose academic status has been verified. "Private" means that the materials are only accessible to the depositor. Access policies can be refined later.');

    $form['flat_metadata_visibility']['#description'] = t('Hidden bundles are not visible to anyone but the depositor and the archive managers. This is to be used only in rare cases in which the name or other metadata fields reveal too much information about work in progresss. Only materials with a private access policy can be hidden.');

    $form['flat_metadata_visibility']['#states'] = array(
        'visible' => array(
            ':input[name="flat_policies"]' => array('value' => 'private'),
        ),
    );

    $user = \Drupal::currentUser();
    $userId = $user->id();

    ksm($form);

    // dd($form_state->getFormObject()->getEntity());
    // Hide unwanted buttons and fields.
    hide($form['flat_bundle_status']);
    hide($form['flat_exception']);
    hide($form['flat_create_cmdi']);
    hide($form['flat_external']);
    hide($form['flat_location']);
    hide($form['flat_type']);
    hide($form['flat_fid']);
    hide($form['flat_original_path']);
    hide($form['flat_parent_title']);
    hide($form['flat_deleted_resources']);
    hide($form['flat_encrypted_resources']);
    hide($form['flat_encrypted_auth_endpoint']);
    hide($form['actions']['preview']);
    hide($form['meta']);
    hide($form['menu']);
    hide($form['menu_link']);
    hide($form['revision']);
    hide($form['revision_information']);

    // Conditionally hide cmdi file field.
    $form['flat_cmdi_file']['#states'] = array(
        'visible' => array(
            array(
                array(
                    ':input[name="flat_cmdi_option"]' => array('value' => 'import'),
                    //':input[name="flat_type"]' => array('value' => 'new'),
                ),
                'or',
                array(':input[name="flat_cmdi_option"]' => array('value' => 'template')),
            ),
        ),
        'required' => array(
            array(
                array(':input[name="flat_cmdi_option"]' => array('value' => 'import')),
                'or',
                array(':input[name="flat_cmdi_option"]' => array('value' => 'template')),
            ),
        ),
    );

    // Query all flat_collection nodes that are owned by the user and have no empty fedora_fid (flat_fid) value.
    // Resulting nodes will be added as options with the node's nid as option-key and node's title as option-labels.
    $options = [];

    $query = \Drupal::entityQuery('node')
        ->accessCheck(TRUE)
        ->condition('type', 'flat_collection');
    //->condition('uid', $userId);
    //->condition("flat_fid.value", "NULL", "!=");

    $entities = $query->execute();

    if (!empty($entities)) {
        foreach ($entities as $entity) {
            $collection_node = \Drupal::entityTypeManager()->getStorage('node')->load($entity);
            $title = $collection_node->getTitle();
            $options[$entity] = $title;
            //$fid = $collection_node->flat_fid->value;
            /**
             * @TODO get fid? needed?
             *
                $fObject = islandora_object_load($fid);
                if ($fObject) {
                    if (in_array('islandora:sp_cmdiCModel', $fObject->models)) {
                        $options[$nid] = $fObject->label;
                    }
                }
             */
        }
    }

    $build_info = $form_state->getBuildInfo();
    // Adapt parent node related fields.
    $args = $build_info['args'];

    $old_options = $form['flat_parent_nid_bundle']['widget']['#options'];
    unset($old_options['key']);
    $form['flat_parent_title']['#disabled'] = true;
    $form['flat_parent_nid_bundle']['widget']['#options'] = $options;
    $form['flat_parent_nid_bundle']['widget']['#empty_value'] = 0;
    $form['flat_parent_nid_bundle']['widget']['#empty_option'] = 'unassigned';

    if (isset($args[1]['type'])) {

        $form['flat_type']['#default_value'][0] = (string) $args[1]['type'];
    }

    // Form alterations depending on node status.
    $node = $form_state->getFormObject()->getEntity();

    if ($node->isNew()) {
        $new_node = true;
        $update = (isset($args[1]['type']) and $args[1]['type'] == 'update') ? true : false;
    } else {
        $new_node = false;
        $update = ($node->flat_type[0]['value'] == 'update') ? true : false;
    }

    if ($new_node and !$update) {

        $node_status = 'create';
        //$form['actions']['submit']['#submit'][0] = 'flat_deposit_flat_bundle_node_form_submit';
    } elseif ($new_node and $update) {

        $node_status = 'update';
        //$form['actions']['submit']['#submit'][0] = 'flat_deposit_flat_bundle_node_form_submit';
    } else {

        $node_status = 'edit';
        //$form['actions']['submit']['#submit'][0] = 'flat_deposit_flat_bundle_node_form_submit';
    }

    switch ($node_status) {

        case 'create': {

                /** @TODO drupal_set_title no longer exists */
                // drupal_set_title(t('Add Bundle'));

                // Assign value to flat_original_path field.
                $form['flat_original_path'][0]['value']['#default_value'] = 'external://USER/COLLECTION/BUNDLE';

                // Create selection of collections.
                // This is dependent from extra parameters. In case the name of a collection is provided only that specific collection can be used
                // Otherwise options are queried based on collection membership.
                if (isset($args[1])) {

                    $form['flat_parent_nid_bundle']['#default_value'][] = (string) $args[1]['parent_nid'];
                    $form['flat_parent_nid_bundle']['#disabled'] = true;

                    $form['flat_parent_title'][0]['value']['#default_value'] = (string) $args[1]['parent_title'];
                }

                /*
                 */
                // custom validation and submission.
                $form['#validate'][] = 'flat_bundle_node_form_add_validate';
                $form['#validate'][] = 'flat_bundle_node_form_add_import_validate';
                $form['#submit'][] = 'flat_bundle_node_form_add_submit';

                break;
            }

            // For existing bundles:
        case 'edit': {

                if ($update) {
                    $form['flat_cmdi_file']['#access'] = false;
                    $form['flat_parent_nid_bundle']['#access'] = false;
                }
                // $node_wrapper = entity_metadata_wrapper('node', $node);

                // Prevent altering bundle name (title), policy.
                $form['title']['#disabled'] = true;
                // $form['flat_policies']['#disabled'] = TRUE;.
                //$form['flat_cmdi_option']['#disabled'] = true;
                //$form['flat_source']['#disabled'] = true;

                // Hide cmdi file field.
                $status = $node->flat_bundle_status->value;
                if ($status != 'open' and $status != 'failed') {
                    hide($form['flat_cmdi_file']);
                    $form['flat_parent_nid_bundle']['#disabled'] = true;
                }

                // Set default_value of parent_nid and parent_title.
                $parent_nid = $node->flat_parent_nid_bundle->value;
                $form['flat_parent_nid_bundle']['#default_value'][] = $parent_nid;

                $collection_name = $node->flat_parent_title->value;
                $form['flat_parent_title']['#default_value'][] = $collection_name;

                $form['#validate'][] = 'flat_bundle_node_form_edit_validate';
                $form['#submit'][] = 'flat_bundle_node_form_edit_submit';

                break;
            }
            // For updated bundles:
        case 'update': {

                // Assign value to flat_original_path field.
                $form['flat_original_path'][0]['value']['#default_value'] = 'external://USER/COLLECTION/BUNDLE';

                // Set default_value of parent_nid and parent_title.
                $form['flat_cmdi_option']['#default_value'][] = 'import';
                if (isset($args[1]['node_title'])) {
                    $form['title']['#default_value'] = (string) $args[1]['node_title'];
                }
                if (isset($args[1]['parent_nid'])) {
                    $form['flat_parent_nid_bundle']['#default_value'][] = (string) $args[1]['parent_nid'];
                }
                if (isset($args[1]['flat_parent_title'])) {
                    $form['flat_parent_title'][0]['value']['#default_value'] = (string) $args[1]['parent_title'];
                }
                if (isset($args[1]['fid_bundle'])) {
                    $form['flat_fid'][0]['value']['#default_value'] = (string) $args[1]['fid_bundle']->id;
                }

                $form['title']['#disabled'] = true;
                $form['flat_parent_nid_bundle']['#disabled'] = true;
                //$form['flat_cmdi_option']['#disabled'] = true;

                // Attach fedora object to validation.
                $form['bundleInFedora'] = array(
                    '#type' => 'value',
                    '#value' => $args[1]['fid_bundle'],
                );

                // Use same validation as add bundle and add some extra validation.
                $form['#validate'][] = 'flat_bundle_node_form_add_validate';
                $form['#validate'][] = 'flat_bundle_node_form_update_validate';
                // Use same submission handler as add bundle and add some extra handling.
                $form['#submit'][] = 'flat_bundle_node_form_add_submit';
                $form['#submit'][] = 'flat_bundle_node_form_update_submit';
                break;
            }
    }
}


/**
 *
 */
function flat_bundle_node_form_add_import_validate($form, FormStateInterface $form_state)
{

    // Prevent deletion of a node to run through validation.
    $form['actions']['delete']['#limit_validation_errors'] = array();

    $file_id = $form_state->getValue(['flat_cmdi_file', 0, 'fid']);
    if (isset($file_id) and $file_id != 0) {

        $file = file_load($file_id);

        // Validate valid xml file.
        if (!@simplexml_load_file($file->uri)) {
            $form_state->setErrorByName('cmdi_file', t('File is not a valid XML file'));
            return $form;
        }

        // Validate kind of cmdi.
        module_load_include('inc', 'flat_deposit', 'Helpers/CMDI/class.CmdiHandler');
        $cmdi = \CmdiHandler::simplexml_load_cmdi_file($file->uri);

        $validateMdSelfLink = $cmdi->validateMdSelfLink();

        if ($validateMdSelfLink !== true) {
            $form_state->setErrorByName('cmdi_file', $validateMdSelfLink);
            return $form;
        };
    }
}

/**
 * Flat_bundle creation validation.
 */
function flat_bundle_node_form_add_validate($form, FormStateInterface $form_state)
{

    $file = file_save_upload('cmdi_file', array(
        // Validate file extensions
        'file_validate_extensions' => array('cmd cmdi xml'),
    ));

    // Prevent deletion of a node to run through validation.
    $form['actions']['delete']['#limit_validation_errors'] = array();

    $source = $form_state->getValue(['flat_source', 0, 'value']);
    $bundle_name = $form_state->getValue(['title', 0, 'value']);

    // Get collection name of this bundle by loading the collection node using the value 'parent_nid'.
    $collection_nid = (string) $form_state->getValue(['flat_parent_nid_bundle', 0, 'value']);

    $node_storage = \Drupal::entityTypeManager()
        ->getStorage('node');

    if ((int) $collection_nid != 0) {

        $collection_node = $node_storage->load($collection_nid);
        $collection = $collection_node->title->value;
    } else {
        $collection = 'unassigned';
    }

    $form_state->setValue(['flat_parent_title', 0, 'value'], $collection);

    $is_update = $form_state->getValue(['flat_type', 0, 'value']) == "update" ? true : false;

    // TODO needs to be checked within Drupal, so for children of the given parent collection
    /*     if ($collection != 'unassigned' and !$is_update) {
        // Validate that no other bundle or collection at same location exists.
        $collection_node = $node_storage->load($collection_nid);
        // $wrapper = entity_metadata_wrapper('node', $collection_node);

        $collection_fid = $node->flat_fid->value;

        module_load_include('inc', 'flat_deposit', '/inc/class.FlatTuque');

        $values = \FlatTuque::getChildrenLabels($collection_fid);

        if ($values and in_array(strtoupper($bundle_name), array_unique(array_map('strtoupper', $values)))) {

            $form_state->setErrorByName('title', t('Another collection or bundle with same name exists at this location. Please use a different name'));
            return $form;
        }
    } */

    $flat_cmdi_option = $form_state->getValue(['flat_cmdi_option', 0, 'value']);

    if ((($flat_cmdi_option == 'import') or ($flat_cmdi_option == 'template')) and !$is_update) {

        module_load_include('inc', 'flat_deposit', 'Helpers/CMDI/class.CmdiHandler');
        $fid = $form_state->getValue(['flat_cmdi_file', 0, 'fid']);
        $cmdi_file = file_load($fid)->uri;
        if (!$fid) {
            // No file specified or has incorrect extension
            $form_state->setErrorByName('flat_cmdi_file', t('No file was specified or it has an incorrect file extension (should be .cmdi)'));
            return $form;
        }
        $filesystem = \Drupal::service("file_system");
        $cmdi = \CmdiHandler::simplexml_load_cmdi_file($filesystem->realpath($cmdi_file));
        // Valid xml?
        if (!$cmdi) {
            $form_state->setErrorByName('flat_cmdi_file', t('Your uploaded CMDI file is not a valid XML file'));
            return $form;
        }
        // Check whether CMDI file has allowed CMDI bundle profile
        $type = $cmdi->getCmdiProfileType();
        if ($type !== 'bundle') {
            $form_state->setErrorByName('flat_cmdi_file', t('Your uploaded CMDI file has a profile that is not accepted as a Bundle profile. See the deposit manual for more information about accepted CMDI profiles.'));
            return $form;
        }

        // Set title of uploaded CMDI file to title of Bundle
        $cmdi->setTitle($bundle_name);
        $exported = $cmdi->asXML($cmdi_file);

        if (!$exported) {
            $form_state->setErrorByName('error', t('Unable to save CMDI file'));
            return $form;
        }
    }

    $user = \Drupal::currentUser();

    // Assign value to flat_original_path field.
    if ($form_state->getValue(['flat_source', 0, 'value']) == 'external') {

        $user_name = str_replace('@', '_at_', $user->getAccountName());

        $form_state->setValue(['flat_original_path', 0, 'value'], "external://$user_name/$collection/$bundle_name");
    }

    $original_path = $form_state->getValue(['flat_original_path', 0, 'value']);

    // Check that bundle name within collection is distinctive from existing bundles, otherwise we get problems with creating new folders.
    $user_id = $user->id();

    module_load_include('inc', 'flat_deposit', 'inc/class.FlatBundle');
    $unique = \FlatBundle::checkUniquenessNaming($user_id, $collection, $bundle_name);

    if (!$unique) {
        $form_state->setErrorByName('title', t('Bundle with same or very similar bundle name exists'));
    }

    $filesystem = \Drupal::service("file_system");

    // Validate that currently selected folder has no subfolders.
    /*     $dirs = array_filter(glob($original_path . '/*'), 'is_dir');
    if (file_exists($filesystem->realpath($original_path)) and !empty(glob($filesystem->realpath($original_path) . '/*', GLOB_ONLYDIR))) {
        //dd(glob($filesystem->realpath($original_path) . '/*', GLOB_ONLYDIR));
        $form_state->setErrorByName('department', t('Chosen directory contains subfolders'));
        return $form;
    } */

    // Validate that no other bundle is using same folder.
    /*     $query = \Drupal::entityQuery('node')
        ->accessCheck(FALSE)
        ->condition('type', 'flat_bundle')
        ->condition('flat_original_path.value', $original_path, '=');

    $results = $query->execute();
    if (empty(!$results)) {

        $form_state->setErrorByName('flat_original_path', t('Specified path for resources is already in use'));
    } */

    return $form;
}

/**
 * Submission handler for newly created bundles.
 */
function flat_bundle_node_form_add_submit($form, &$form_state)
{

    $bundle = $form_state->getValue(['title']);
    $collection = $form_state->getValue(['flat_parent_title'][0]['value']);

    $user = \Drupal::currentUser();
    /* removed this since we no longer use IMCE. Should remove entire IMCE dependency at some point
    // Initiate user directories if necessary.
    module_load_include('inc', 'imce', 'inc/imce.page');
    imce_initiate_profile($user, 'external');
    */

    // Determine directories for metadata and resources.
    $meta_dir = 'metadata://' . str_replace('@', '_at_', $user->getAccountName()) . "/$collection/$bundle";

    // Set resources location depending on defined source.
    $source = $form_state->getValue(['flat_source'][0]['value']);
    if (in_array($source, array('local', 'cloud'))) {

        $resource_dir = $form_state->getValue(['flat_original_path'][0]['value']);
    } else {

        $resource_dir = 'external://' . str_replace('@', '_at_', $user->getAccountName()) . "/$collection/$bundle";
    }

    $file_system = \Drupal::service("file_system");

    // Create bundle data and metadata directories.
    if (!file_exists($resource_dir)) {
        $file_system->mkdir($resource_dir, null, true);
    }

    if (!file_exists($meta_dir)) {
        $file_system->mkdir($meta_dir, null, true);
    }

    // Add resource_directory to node.
    $form_state->setValue(['flat_location'][0]['value'], $resource_dir);

    // Adapt Is part of collection info.
    // Change naming of uploaded file.
    $mDataName = 'record.cmdi';
    $file_id = $form_state->getValue(['flat_cmdi_file'][0]['fid']);
    if (isset($file_id) and $file_id != 0) {

        $file = file_load($file_id);
        $file->filename = $mDataName;
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
        $new_location = file_move($file, $meta_dir . '/' . $mDataName);

        if (!$new_location) {
            \Drupal::messenger()->addMessage(t('Error during move of metadata file'), 'error');
        }
    }
}

/**
 *
 */
function flat_bundle_node_form_update_validate($form, &$form_state)
{

    // Prevent deletion of a node to run through validation.
    $form['actions']['delete']['#limit_validation_errors'] = array();

    // Todo add extra validation.
}

/**
 * Adds cmdi from existing fedora object datastream to flat_cmdi_file.
 */
function flat_bundle_node_form_update_submit($form, &$form_state)
{

    // Determine target directory for metadata.
    $bundle = $form_state->getValue(['title']);
    $collection = $form_state->getValue(['flat_parent_title'][0]['value']);
    $user = \Drupal::currentUser();

    $meta_dir = 'metadata://' . str_replace('@', '_at_', $user->getAccountName()) . "/$collection/$bundle";

    // Create cmdi file from datastream in user metadata directory.
    $fObj = $form['bundleInFedora']['#value'];
    $ds = $fObj['CMD'];

    $fName = $meta_dir . '/record.cmdi';
    $cmdi_file = $ds->getContent($fName);
    if (!$cmdi_file) {

        \Drupal::messenger()->addMessage(t('Unable to write cmdi to file'), 'error');
    }

    // Create managed file entry in drupal database.
    $new_file = file_save((object) array(
        'filename' => 'record.cmdi',
        'uri' => $fName,
        'status' => FILE_STATUS_PERMANENT,
        'filemime' => file_get_mimetype($fName),
        'display' => '1',
        'description' => '',
    ));

    if (!$new_file) {

        \Drupal::messenger()->addMessage(t('Unable to create managed file entry'), 'error');
    }

    if ($new_file->uri != $fName) {
        \Drupal::messenger()->addMessage(t(
            'Filename of attached file has changed for unknown reasons from !fname to !uri',
            array('!fname' => $fName, 'uri' => $new_file->uri)
        ), 'warning');
    }

    // Attach managed file to bundle.
    $form_state->addValue(['flat_cmdi_file'], array(
        'fid' => $new_file->fid,
        'display' => "1",
        'description' => "",
        'upload_button' => 'Upload',
        'remove_button' => 'Remove',
        'upload' => '',

    ));
}

/**
 * Validation of flat_bundle node edits. At the moment this is only assigning a bundle to a different collection.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function flat_bundle_node_form_edit_validate($form, FormStateInterface $form_state)
{

    // Prevent deletion of a node to run through validation.
    $form['actions']['delete']['#limit_validation_errors'] = array();

    $node = $form_state->getFormObject()->getEntity();
    // $wrapper = entity_metadata_wrapper('node', $node);
    $original_collection_nid = $node->flat_parent_nid_bundle->value();

    $new_node = $form_state->getFormObject()->getEntity();
    // $new_wrapper = entity_metadata_wrapper('node', $new_node);
    $new_collection_nid = $form_state->getValue(['flat_parent_nid_bundle'][0]['value']);

    $collection_node = get_collection_node($new_collection_nid);

    // Set parent nid value of this bundle to the name of the new collection.
    $form_state->setValue(['flat_parent_title'][0]['value'], $collection_node->title);

    $collection_has_changed = $original_collection_nid != $new_collection_nid;

    // Validate that no record.cmdi exists with metadata related to a collection and then, the collection changes.
    $cmdi_option = $node->flat_cmdi_option->value;
    $cmdi_file = $node->flat_cmdi_file->value;
    if ($cmdi_option == 'new' and !is_null($cmdi_file) and $collection_has_changed) {

        $form_state->setErrorByName('flat_parent_nid_bundle', t('It is not possible to change the collection if new metadata file has been saved. Please remove record.cmdi first'));
        return $form;
    }

    // Check that bundle name within collection is distinctive from existing bundles, otherwise we get problems with creating new folders.
    $user_id = $node->getOwnerId();
    module_load_include('inc', 'flat_deposit', 'inc/class.FlatBundle');
    $unique = \FlatBundle::checkUniquenessNaming($user_id, $collection_node->title, $node->title);

    if (!$unique) {

        $form_state->setErrorByName('title', t('Bundle with same or very similar bundle name exists'));
        return $form;
    }

    if ($form_state['triggering_element']['#type'] == 'select') {

        return $form;
    }
}

/**
 *
 */
function flat_bundle_node_form_edit_submit($form, FormStateInterface $form_state)
{
}

/**
 *
 */
function get_collection_node($nid)
{
    // If parent nid has changed
    // get name of collection.
    if ((int) $nid == 0) {
        $collection_node = new stdClass();
        $collection_node->title = 'unassigned';
    } else {
        $collection_node =  \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    }

    return $collection_node;
}

/**
 * Flat_bundle node validator called every time a flat_bundle node is created or edited (also AJAX!!)
 *
 * @param $node
 * @param $form
 * @param $form_state
 */
/*
function flat_bundle_validate($node, $form, &$form_state)
{

    // Prevent deletion of a node to run through validation.
    $form['actions']['delete']['#limit_validation_errors'] = array();

    $node_wrapper = entity_metadata_wrapper('node', $node);
    $source = $node_wrapper->flat_source->value();
    $original_path = $node_wrapper->flat_original_path->value();
    echo($original_path);
    if ($source == 'local') {

        if (!file_exists($original_path)) {

            $form_state->setErrorByName('flat_location', t('Specified path does not exist on archive server'));

        }
    }

}
 */
/**
 * Implements hook_view().
 */
/* function flat_collection_view($node, $view_mode)
{

    if ($view_mode == 'full' && node_is_page($node)) {
        $user = \Drupal::currentUser();
        drupal_set_breadcrumb(array(
            l(t('Home'), null),
            l(t('My Dashboard'), 'dashboard/' . $user->id() . '/collections'),
        ));

        $output = $node->flat_fid->value;

        // $wrapper = entity_metadata_wrapper('node', $node);
        $val = $node->flat_fid->value;

        
        $node->content['flat_fid'] = array(
        '#weight' => 10,
        '#theme' => 'link',
        '#path' => 'islandora/object/' . $val,
        '#prefix' => '<div>',
        '#suffix' => '</div>',
        '#text' => t('Shortcut to archived collection'),
        '#options' => array(
        'attributes' => array(),
        'html' => FALSE,
        ),
        );
        

        $node->content['add_bundle'] = array(
            '#weight' => 10,
            '#prefix' => '<div>',
            '#suffix' => '</div>',
            '#theme' => 'link',
            '#path' => 'islandora/object/' . $val . '/add_bundle',
            '#text' => t('Add new bundle to this collection'),
            '#options' => array(
                'attributes' => array(),
                'html' => false,
            ),
        );

        // flat_fid.
        // Add form to node.
        module_load_include('inc', 'flat_deposit', '/inc/flat_collection.bundle_actions');
        $extra_form = \Drupal::service('entity.form_builder')
            ->getForm('flat_collection_bundle_action_form', $node);

        $node->content['extra_form'] = $extra_form;
        $node->content['extra_form']['#weight'] = 998;
    }

    return $node;
} */

/**
 * Implements hook_view().
 */
function flat_bundle_view($node, $view_mode)
{

    // $wrapper = entity_metadata_wrapper('node', $node);
    $file = $node->flat_cmdi_file->value;
    // If (!file_exists($meta_dir)) $file_system->mkdir($meta_dir, NULL, TRUE);.
    if ($view_mode == 'full' && node_is_page($node)) {
        // Breadcrumb navigation.  l() escapes title, so we should not escape !name.
        drupal_set_breadcrumb(array(
            l(t('Home'), null),
            l(t('My Dashboard'), 'dashboard'),
            l(t('!name', array('!name' => $node->flat_parent_title->value())), 'node/' . $node->flat_parent_nid_bundle->value()),
        ));

        $exception = $node->flat_exception[0]['value'];
        if ($exception) {
            $node->content["flat_exception"] = $node->flat_exception->value;
        }
    }

    return $node;
}

/**
 * Implements hook_node_view()
 *
 * Act on a node being viewed.
 *
 * @param $node
 *   The node that is being view.
 *
 * @param $view_mode
 *   The view mode of node.
 *
 * @param $langcode
 *   The language of node.
 *
 * @ingroup node_api_hooks
 */
/*
function flat_deposit_node_view(array &$build, Node $node, EntityViewDisplay $display, $view_mode)
{

    $type = $node->getType();

    if ($type == 'flat_bundle' and $view_mode == 'full' and node_is_page($node)) {

        // $wrapper = entity_metadata_wrapper('node', $node);

        if ($node->flat_source->value == 'external' and isset($node->content['flat_original_path'])) {

            unset($node->content['flat_original_path']);
        }

        unset($node->content['flat_bundle_status']);
        unset($node->content['flat_parent_nid_bundle']);
        unset($node->content['flat_parent_title']);
        unset($node->content['flat_cmdi_option']);
        unset($node->content['flat_policies']);
        unset($node->content['flat_source']);
        unset($node->content['flat_external']);
        unset($node->content['flat_location']);

        // If (isset($node->content['flat_fid'])){
        //    $node->content['flat_fid']['#title'] = 'Link to archived bundle ';
        //    $node->content['flat_fid'][0]['#markup'] = l('link archive' , 'islandora/object/' . rawurlencode($node->content['flat_fid'][0]['#markup'])) ;
        // } else {.
        unset($node->content['flat_fid']);

        // }.
        unset($node->content['flat_type']);
    }

    if ($type == 'blog' and $view_mode == 'full' and node_is_page($node)) {
        // Modify breadcrumb for blog nodes (reports)
        $user = \Drupal::currentUser();
        drupal_set_breadcrumb(array(
            l(t('Home'), null),
            l(t('My Dashboard'), 'dashboard/' . $user->id() . '/notifications'),
        ));
    }
    
$node->content['link_dashboard']['#title'] = 'Return to dashboard';
$node->content['link_dashboard']['#markup'] = l('Shortcut to dashboard' , 'dashboard') ;
 
}
*/

/**
 * Implements hook_node_view_alter().
 *
 * Remove "user's blog" link from blog posts (reports)
 */
function flat_deposit_node_view_alter(&$build)
{
    unset($build['links']['blog']['#links']['blog_usernames_blog']);
}

/**
 * Implements hook_preprocess_node().
 *
 * Remove "submitted by" from any node.
 */
function flat_deposit_preprocess_node(&$variables)
{
    $variables['display_submitted'] = false;
    $variables['submitted'] = '';
    $variables['user_picture'] = '';
}

/**
 * Implements hook_preprocess_page().
 *
 * Modify bundle title in page view depending on whether it is new or an update.
 */
function flat_deposit_preprocess_page(&$variables)
{
    $node = isset($variables['node']) ? $variables['node'] : null;
    if (isset($node) && $node->type == "flat_bundle") {
        // $wrapper = entity_metadata_wrapper('node', $node);
        if (isset($node) && $node->type == "flat_bundle") {
            if ($node->flat_type->value == "new") {
                drupal_set_title(t('New bundle %title', array('%title' => $node->title)), PASS_THROUGH);
            }
            if ($node->flat_type->value == "update") {
                drupal_set_title(t('Update bundle %title', array('%title' => $node->title)), PASS_THROUGH);
            }
        }
    }
}

/**
 * Implements hook_delete().
 */
function flat_bundle_delete($node)
{

    // global $user;
    $user = \Drupal::currentUser();
    $bundle = $node->title;
    // $wrapper = entity_metadata_wrapper('node', $node);
    $collection = $node->flat_parent_title->value;

    $tail = str_replace('@', '_at_', $user->getAccountName()) . "/$collection/$bundle";

    // $bundle_resources_directory = drupal_realpath('external://') . "/$tail";.
    $bundle_metadata_directory = \Drupal::service('file_system')->realpath('metadata://') . "/$tail";

    // $bundle_resources_freeze_directory = drupal_realpath('freeze://data') . "/$tail";.
    $bundle_metadata_freeze_directory = \Drupal::service('file_system')->realpath('freeze://metadata') . "/$tail";

    // $dirs = [$bundle_resources_directory, $bundle_metadata_directory, $bundle_resources_freeze_directory, $bundle_metadata_freeze_directory];.
    $dirs = [$bundle_metadata_directory, $bundle_metadata_freeze_directory];

    module_load_include('inc', 'flat_deposit', 'inc/class.FlatBundle');

    $move = \FlatBundle::moveBundleData($node, 'data', 'unfreeze');

    foreach ($dirs as $dir) {
        if (file_exists($dir)) {
            \FlatBundle::recursiveRmDir($dir);
            rmdir($dir);
        }
    }
}

/**
 * Implements hook_form_alter().
 *
 * Prevent deletion of flat_collection in case there are active flat_bundle children.
 */
function flat_deposit_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if ((isset($form['operation']['#value']) && $form['operation']['#value'] == 'delete') || (isset($form['#id']) && ($form['#id'] == 'node-delete-confirm'))) {

        $user = \Drupal::currentUser();
        $user_id = $user->id();
        $node = $form_state->getFormObject()->getEntity();
        $nid = $node->nid;
        if ($node->type == 'flat_collection') {

            $query = \Drupal::entityQuery('node')
                ->accessCheck(TRUE)
                ->condition('type', 'flat_bundle')
                ->condition('flat_parent_nid_bundle.value', $nid, '=');
            //->condition('uid', $user_id);

            // $query = new EntityFieldQuery();
            // $query->entityCondition('entity_type', 'node')
            //     ->entityCondition('bundle', 'flat_bundle')
            //     ->fieldCondition('flat_parent_nid', 'value', "$nid", '=')
            //     ->propertyCondition('uid', $user->uid);

            $user_bundle_nodes = $query->execute();
            if (!empty($user_bundle_nodes['node'])) {
                // drupal_set_title(t('Cannot delete collection "') . $node->title . '".');
                \Drupal::messenger()->addErrorMessage(t('This collection cannot be removed from your active collections because it has active bundles associated with it'));
                unset($form['actions']['submit']);
                unset($form['description']);
                $form['actions']['cancel']['#title'] = t('Back to previous page');
            }
        }
    }
}

/**
 * Custom form submit handler for flat_bundle in order to get rid of "node created" messages.
 */
/* function flat_deposit_flat_bundle_node_form_submit($form, FormStateInterface $form_state)
{
    //$node = node_form_submit_build_node($form, $form_state);
    $node = EntityForm::buildEntity($form, $form_state);
    $insert = empty($node->nid);
    //node_save($node);
    EntityBase::save($node);
    $node_link = l(t('view'), 'node/' . $node->nid);
    $watchdog_args = array(
        '@type' => $node->type,
        '%title' => $node->title,
    );
    $t_args = array(
        '@type' => node_type_get_name($node),
        '%title' => $node->title,
    );
    if ($insert) {
        watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
        // \Drupal::messenger()->addMessage(t('@type %title has been created.', $t_args));.
    } else {
        watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
        \Drupal::messenger()->addMessage(t('Properties of bundle %title have been updated.', $t_args));
    }
    if ($node->nid) {
        $form_state['values']['nid'] = $node->nid;
        $form_state['nid'] = $node->nid;
        $form_state['redirect'] = node_access('view', $node) ? 'node/' . $node->nid : '<front>';
    } else {

        // In the unlikely case something went wrong on save, the node will be
        // rebuilt and node form redisplayed the same way as in preview.
        \Drupal::messenger()->addMessage(t('The bundle cannot be modified.'), 'error');
        $form_state['rebuild'] = true;
    }

    // Clear the page and block caches.
    cache_clear_all();
} */

/**
 * Implements hook_block_info().
 */
function flat_deposit_block_info()
{
    $blocks = array();

    $blocks['node_actions'] = array(
        'info' => t('FLAT deposit upload bundle actions '),
        'status' => true,
        'weight' => 500,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php $val = (is_numeric(arg(1)) AND arg(2) == FALSE ) ? TRUE :  FALSE; return $val; ?>',
    );

    $blocks['node_file_listing'] = array(
        'info' => t('FLAT deposit listing of uploaded files'),
        'status' => true,
        'weight' => 100,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => '<?php if (arg(0) == "node" AND is_numeric(arg(1)) AND arg(2) == FALSE ) {$node = node_load(arg(1)); return ($node->type == "flat_bundle");} else {return FALSE;}  ?>',
    );

    $blocks['cmdi_resource_actions'] = array(
        'info' => t('FLAT deposit bundle cmdi resource actions '),
        'status' => true,
        'weight' => 300,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_PHP,
        'pages' => "<?php if (arg(0) == 'node' AND is_numeric(arg(1)) AND arg(2) == FALSE ) {return TRUE ;} else {return FALSE;}  ?>",
    );

    $blocks['flat_deposit_collections'] = array(
        'info' => t('FLAT deposit form with owned collections living in fedora'),
        'status' => true,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "dashboard/*/collections/inactive",
        'weight' => 999,

    );

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function flat_deposit_block_view($delta = '')
{

    $block = [];

    switch ($delta) {
        case 'node_actions':

            module_load_include('inc', 'flat_deposit', 'inc/flat_bundle.actions_form');

            $form = drupal_get_form('flat_bundle_action_form');
            $rendered_form = drupal_render($form);

            $block = array(
                'subject' => '',
                'content' => $rendered_form,
            );
            break;

        case 'node_file_listing':

            module_load_include('inc', 'flat_deposit', 'inc/flat_bundle.manage_resources_form');

            $node = menu_get_object();
            $node_wrapper = entity_metadata_wrapper('node', $node);

            $orig_location = $node_wrapper->flat_original_path->value();
            $orig_dirname = basename($orig_location);

            $block = array(
                'subject' => t("Files in folder \"@dirname\" to be added to this bundle:", array('@dirname' => $orig_dirname)),
                'content' => drupal_get_form('flat_bundle_manage_resources_form', ['node' => $node]),
            );

            break;

        case 'cmdi_resource_actions':

            module_load_include('inc', 'flat_deposit', 'inc/flat_bundle.update_cmdi_resources_form');

            $node = menu_get_object();

            // Hide blocks for function calls that are not related to nodes.
            if (!$node) {
                $block['content'] = [];
                break;
            }

            // Hide blocks for nodes without flat_fid or flat_cmdi_file field.
            $node_wrapper = entity_metadata_wrapper('node', $node);

            if (!isset($node_wrapper->flat_fid) or !isset($node_wrapper->flat_cmdi_file)) {
                $block['content'] = [];
                break;
            }

            // Hide blocks for nodes without assigned fedora ID or without cmdi file.
            $fedora_id = $node_wrapper->flat_fid->value();
            $file = $node_wrapper->flat_cmdi_file->value();
            $fName = $file['uri'];

            if (is_null($fName) or is_null($fedora_id)) {
                $block['content'] = [];
                break;
            }

            $block['subject'] = t('Current files in bundle');
            $block['content'] = drupal_get_form('flat_bundle_update_cmdi_resources_form', ['node' => $node]);

            break;

        case 'flat_deposit_collections':
            module_load_include('inc', 'flat_deposit', '/inc/flat_collection.fedora_collections_actions');
            $block['subject'] = t('My inactive collections');
            $block['content'] = drupal_get_form('flat_fedora_collections_form');
            break;
    }

    return $block;
}

/**
 * @TODO fix menu access when fedora connection is fixed
 */
function flat_deposit_menu_access(Menu $menu, $op, AccountInterface $account)
{
    //return true;

    $userId = \Drupal::currentUser()->id();

    $has_access = AccessResult::forbidden();;

    $has_permissions = true;

    //drupal_alter('flat_has_permissions', $has_permissions, $object);

    if (Drupal::currentUser()->hasPermission('use deposit module')) {

        //module_load_include('inc', 'islandora', 'includes/utilities');

        //module_load_include('inc', 'flat_deposit', 'inc/class.FlatCollection');

        $has_collectionCModel = true; //!empty($object->relationships->get(FEDORA_MODEL_URI, 'hasModel', 'islandora:collectionCModel'));

        $has_cmdi_content_model = true; //!empty($object->relationships->get(FEDORA_MODEL_URI, 'hasModel', 'islandora:sp_cmdiCModel'));

        //$fid = $object->id;

        $has_node_in_my_collections = true; //!empty(FlatCollection::getUserCollectionNodes($userId, $fid));

        switch ($op) {
            case 'add current collection menu':

                $has_access = ($has_permissions and $has_collectionCModel and !$has_node_in_my_collections) ? AccessResult::allowed() : AccessResult::forbidden();

                break;

            case 'add bundle menu':

                $has_access = ($has_permissions and $has_collectionCModel and $has_cmdi_content_model and $has_node_in_my_collections) ? AccessResult::allowed() : AccessResult::forbidden();

                break;

            case 'add collection menu':

                $has_access = ($has_permissions and $has_collectionCModel and $has_node_in_my_collections) ? AccessResult::allowed() : AccessResult::forbidden();

                break;

            case 'update collection menu':

                $has_access = ($has_permissions and $has_collectionCModel and $has_cmdi_content_model and $has_node_in_my_collections) ? AccessResult::allowed() : AccessResult::forbidden();

                break;

            case 'view node menu':
                //$fid = $object->id;

                $query = new EntityQuery('node');
                $query->condition('type', 'flat_bundle');
                //->condition('flat_fid.value', $fid, '=');

                $bundle_nodes = $query->execute();

                $has_access = isset($bundle_nodes['node']) ? AccessResult::allowed() : AccessResult::forbidden();

                break;

            case 'update bundle menu':
            case 'update bundle metadata menu':

                // Bundles should in principle have compoundCModel and not collectioCModel, however empty imported bundles do not seem to have compoundCModel...
                // $has_compoundCModel = !empty($object->relationships->get(FEDORA_MODEL_URI, 'hasModel', 'islandora:compoundCModel'));
                // Check that archived bundle has no active bundle node (i.e. is being updated)

                $query = new EntityQuery('node');
                $query->condition('type', 'flat_bundle');
                //->condition('flat_fid.value', $fid, '=');

                $bundle_nodes = $query->execute();

                $has_no_active_node = empty($bundle_nodes);

                $has_access = ($has_permissions and !$has_collectionCModel and $has_cmdi_content_model and $has_no_active_node) ? AccessResult::allowed() : AccessResult::forbidden();

                break;

            default:

                $has_access = AccessResult::forbidden();;

                break;
        }
    }

    return $has_access;
}

/*
function flat_deposit_islandora_compoundCModel_islandora_view_object_alter(&$object, &$rendered) {

$output = array(
'#type' => 'markup',
'#markup' => '<div>compoundCModel content</div>',
);

$rendered["Default output"]['#markup'] .= drupal_render($output);

}
 */

/**
 * Implements hook_cmodel_pid_view_object_alter.
 *
 * Adding rendered cmdi metadata to view of object with cmdi model. Only for bundles!!!
 */
function flat_deposit_islandora_sp_cmdiCModel_islandora_view_object_alter(&$object, &$rendered)
{

    $markup = array(
        '#theme' => 'islandora_cmdi_display',
        '#islandora_object' => $object,
    );

    // krumo($object);
    // krumo($rendered);
    if (isset($rendered["Default output"]['#markup'])) {
        $rendered["Default output"]['#markup'] .= drupal_render($markup);
    }
}

/**
 *
 */
function flat_deposit_update($fedora_object)
{

    // Check that archived bundle has no active bundle node (i.e. is being updated)
    $fid = $fedora_object;

    $user = \Drupal::currentUser();
    $user_id = $user->id;

    $query = new EntityQuery();
    $query->condition('type', 'flat_bundle')
        ->condition('uid', $user_id)
        ->condition('flat_fid.value', $fid, '=');

    $bundle_nodes = $query->execute();

    if (isset($bundle_nodes['node'])) {

        $nids = array_keys($bundle_nodes['node']);

        drupal_goto('node/' . $nids[0]);
    }
}

/**
 * Implements hook_cmodel_pid_view_object_alter.
 *
 * Adding rendered cmdi metadata to view of object with collection model. Thus only for collections.
 */
function flat_deposit_islandora_collectionCModel_islandora_view_object_alter(&$object, &$rendered)
{

    $markup = array(
        '#theme' => 'islandora_cmdi_display',
        '#islandora_object' => $object,
    );

    module_load_include('inc', 'flat_deposit', 'inc/class.FlatTuque');
    $object_content_models = \FlatTuque::getCModels($object);

    if (isset($rendered['wrapper']['metadata']['#markup']) and in_array('islandora:sp_cmdiCModel', $object_content_models)) {

        $rendered['wrapper']['metadata']['#markup'] .= drupal_render($markup);
    }
}

/**
 * Implements hook_admin_paths_alter.
 *
 * Preventing node edit to use the admin overlay.
 */
function flat_deposit_admin_paths_alter(&$paths)
{
    // Return FALSE to the path where you don't want to show in OVERLAY.
    $paths['node/*/edit'] = false;
    $paths['node/*/delete'] = false;
}

/**
 * Implements hook_node_access().
 *
 * Restrict access to FLAT node types and blog (reports) to node owner and manager users.
 */
function flat_deposit_node_access(Node $node, $op, AccountInterface $account)
{
    /**
     * @TODO why is blog in the node types array here? Can this be removed?
     */
    $types = ['flat_bundle', 'flat_collection', 'blog'];
    $type = $node->getType();

    /**
     * @TODO
     * check if node->status converted to node->isPublished() is a
     * 1:1 replacement
     */
    /**
     * @TODO
     * refactor this code to make 'view' and 'manager' occurrences here and
     * everywhere else in the module to use class constants (e.g. NodeOperations::OPERATION_VIEW and UserRoles::ROLE_MANAGER)
     * instead of hardcoded strings we're using now
     */
    if ($op == 'view' && in_array($type, $types) && $node->isPublished()) {
        if (($account->id() == $node->getOwnerId()) || (in_array('manager', $account->getRoles()))) {
            // Grant access to user.
            return AccessResult::allowed();
        } else {
            // Deny access to user.
            return AccessResult::forbidden();
        }
    }
    return AccessResult::neutral();
}

/**
 * Implements hook_menu_alter().
 *
 * Get rid of blog listings.
 *
 * @TODO why is this necessary, research if blog endpoint can be removed
 * from this module so this method can be removed as well
 */
function flat_deposit_menu_alter(&$items)
{
    unset($items['blog']);
    unset($items['blog/%user_uid_optional']);
    unset($items['blog/%user/feed']);
    unset($items['blog/feed']);
}

/**
 * Implements hook_menu_local_tasks_alter
 * 
 * Get rid of edit/delete/revision tabs ("local tasks") on nodes
 */
function flat_deposit_menu_local_tasks_alter(&$data, $route_name, \Drupal\Core\Cache\RefinableCacheableDependencyInterface &$cacheability)
{
    unset($data['tabs'][0]['entity.node.edit_form']);
    unset($data['tabs'][0]['entity.node.delete_form']);
    unset($data['tabs'][0]['entity.node.version_history']);
}

/**
 * hook_form_FORM_ID_alter().
 */
function flat_deposit_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
    $form['additional_settings']['#access'] = FALSE;
    $form['meta']['#access'] = FALSE;
    $form['menu']['#access'] = FALSE;
    $form['path']['#access'] = FALSE;
    $form['author']['#access'] = FALSE;
    $form['options']['#access'] = FALSE;
}

/*
/**
 * Implements hook_data_move_actions().
 *
 * Additional actions after performing data move
 *
 *
 *
// probably not needed
function flat_deposit_data_move_actions($source_location, $target_location) {
return true;
}
 */
