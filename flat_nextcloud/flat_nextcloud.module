<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Module for using Nexcloud alongside FLAT for uploading data
 *
 */

/**
 * Implements hook_user_profile_form_alter.
 *
 * Adds Nextcloud-related fields to user profile form if Nextcloud integration is enabled.
 * Limits access to these fields to users with 'administer users' permission.
 */
function flat_nextcloud_form_user_profile_form_alter(&$form, &$form_state, $form_id)
{
    if (!in_array($form_id, ['user_register_form', 'user_profile_form'])) {
        return;
    }

    $account_element = &$form['account'];
    $account_element['nextcloud_integration'] = [
        '#type' => 'checkbox',
        '#title' => \Drupal::service('entity_type.manager')
            ->getDefinition('user')->getFieldDefinition('nextcloud_integration')->getLabel(),
        '#default_value' => $form_state->getUser()->get('nextcloud_integration')->value ?? FALSE,
        '#access' => \Drupal::currentUser()->hasPermission('administer users'),
    ];
    $account_element['nextcloud_uid'] = [
        '#type' => 'textfield',
        '#title' => \Drupal::service('entity_type.manager')
            ->getDefinition('user')->getFieldDefinition('nextcloud_uid')->getLabel(),
        '#default_value' => $form_state->getUser()->get('nextcloud_uid')->value ?? '',
        '#access' => \Drupal::currentUser()->hasPermission('administer users'),
    ];
}

/**
 * Implements hook_node_form_alter
 *
 * create form elements for selecting a nextcloud folder as the source of the files to be added to the bundle
 *
 */
function flat_nextcloud_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id)
{

    if ($form_id == 'node_flat_bundle_form' or $form_id == 'node_flat_bundle_edit_form') {


        hide($form['flat_nc_path']);
        // also hide flat_ws_path, in case the workspaces module was installed but is not active
        if (isset($form['flat_ws_path'])) {
            hide($form['flat_ws_path']);
        }

        $form_state->loadInclude('flat_nextcloud', 'inc', 'inc/class.Nextcloud');
        module_load_include('inc', 'node', 'node.pages');
        $form['nextcloud_navigation'] = \Nextcloud::get_container();

        // permission checks
        $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
        $nextcloudActivated = \Drupal::config('flat_nextcloud.settings')->get('activated');
        $nextcloudAllowed = \Drupal::currentUser()->hasPermission('use nextcloud');
        $nextcloudEnabledForUser = $user->nextcloud_integration->value ? $user->nextcloud_integration->value : false;
        $nextcloudUid = $user->nextcloud_uid->value ? $user->nextcloud_uid->value : false;

        if (!$nextcloudActivated || !$nextcloudAllowed || !$nextcloudEnabledForUser) {
            unset($form['flat_source']['#options']['cloud']);
            $form['flat_source']['widget'][0]['value']['#default_value'] = NULL;
            unset($form['nextcloud_navigation']);
            return;
        }

        if (!$nextcloudUid) {
            \Drupal::messenger()->addMessage(t('No Nextcloud User ID found. Please contact the archive manager.'), 'error');
            unset($form['flat_source']['#options']['cloud']);
            unset($form['nextcloud_navigation']);
            return;
        }

        $nextcloud_root = 'nextcloud://' . $nextcloudUid . '/files';

        // check whether nextcloud root for user exists
        if (!file_exists($nextcloud_root)) {
            if (!$form_state->getValues()) {
                \Drupal::messenger()->addMessage(t('No Nextcloud directory found for your account. In case you have never logged in to Nextcloud, please do that first. If this error persists, please contact the archive manager.'), 'error');
            }
            unset($form['flat_source']['#options']['cloud']);
            unset($form['nextcloud_navigation']);
            return;
        }

        if (isset($form['nextcloud_navigation'])) {
            $form_state->loadInclude('node', 'inc', 'node.pages');

            hide($form['nextcloud_navigation']['field']['chosen_nc_path']);

            $node = $form_state->getFormObject()->getEntity();
            // add original path to values if node is edited and thus original path is already set.
            $flat_original_path = $node->get('flat_original_path')->value;

            if (empty($form_state->getValue(['next_nc_directories'])) and $flat_original_path) {

                $form_state->setValue('flat_nc_path',  $flat_original_path);
                $form_state->setRebuild();
            }

            // Get nextcloud path value.
            $current = \Nextcloud::get_flat_nc_path($form_state, $nextcloud_root);

            // (if chosen) extend 'current' directory value with value of next_directories
            if (!empty($form_state->getValue(['next_nc_directories']))) {
                $form['nextcloud_navigation']['field']['next_nc_directories']['#options'] = array();
                $form['nextcloud_navigation']['field']['next_nc_directories']['#access'] = false;
                $form['nextcloud_navigation']['field']['next_nc_directories']['#default_value'] = '';
            }

            // alter default value of the flat_nc_path field to attach value of current directory to flat_bundle node
            $form['flat_nc_path']['widget'][0]['value']['#type'] = 'hidden';
            $form['flat_nc_path']['widget'][0]['value']['#default_value'] = $current;

            // print result to screen
            $form['nextcloud_navigation']['field']['current_directory']['#markup'] = 'Currently selected folder: <strong><br/>' .
                str_replace('nextcloud://' . $nextcloudUid . '/files', '[Nextcloud]', $current . '</strong><br/><br/>');
            $form['nextcloud_navigation']['field']['chosen_nc_path']['#value'] = $current;

            // populate dropdown with subdirectories
            $NcSubDirs = \Nextcloud::listAccessibleFolderContent($current, $nextcloud_root, ['hasValidDirectoryName', 'isDir', 'webUserHasWritePermissions', 'isNotDot']);

            if (!empty($NcSubDirs)) {
                $form['nextcloud_navigation']['field']['next_nc_directories']['#options'] = array_combine($NcSubDirs, $NcSubDirs);
                $form['nextcloud_navigation']['field']['next_nc_directories']['#access'] = true;
                $form['nextcloud_navigation']['field']['next_nc_directories']['#title'] = 'Subfolder';
            }

            // add custom submit handler and place it first
            $form['actions']['submit']['#submit'][] = 'flat_nextcloud_form_node_flat_bundle_form_submit';
            array_unshift($form['actions']['submit']['#submit'], 'flat_nextcloud_form_node_flat_bundle_form_submit');

            // add custom validation
            $form['#validate'][] = 'flat_nextcloud_flat_bundle_node_form_validate';
        }
    }
}

function flat_nextcloud_flat_bundle_node_form_validate($form, &$form_state)
{
    // Validate that currently selected folder has no subfolders, contains no more than configured maximum files, contains no files that are larger than configured maximum size, contains files with valid names and allowed extensions.
    if ($form_state->getValue(['flat_source', 0, 'value']) == 'cloud') {
        // Get ws path value.
        $flat_nc_path = $form['flat_nc_path']['widget'][0]['value']['#default_value'];
        $next_dirs = $form_state->getValue(['next_nc_directories']);
        if (!empty($next_dirs)) {
            if ($next_dirs == '..') {
                // go one level up
                $dir = dirname($flat_nc_path);
                $subDirs = \Nextcloud::listAccessibleFolderContent($dir, ['hasValidDirectoryName', 'isDir', 'userHasWritePermissions', 'webUserHasWritePermissions', 'isNotDot']);
                if (!empty($subDirs)) {
                    $form['nextcloud_navigation']['field']['next_nc_directories']['#options'] = array_combine($subDirs, $subDirs);
                }
            } else {
                // add selected directory to path
                $dir = $flat_nc_path . '/' . $next_dirs;
            }
        } else {
            $dir = $flat_nc_path;
        }
        if (!$dir or !file_exists(\Drupal::service('file_system')->realpath($dir))) {
            $form_state->setErrorByName('next_nc_directories', 'Please select a valid Nextcloud folder.');
            return $form;
        } else {
            $form_state->setValue(['flat_nc_path', 0, 'value'], $dir);
            $errors = array();
            $files = [];
            if (is_dir($dir)) {
                $files = \Drupal::service('file_system')->scanDirectory($dir, '/.*/', array('min_depth' => 0));
            }
            $dir_in_use = \Nextcloud::isDirInUse($dir);
            if ($dir_in_use) {
                $form_state->setErrorByName('next_nc_directories', 'The selected Nextcloud folder is already in use for a different bundle.');
                return $form;
            }
            $ingest_service_variables = \Drupal::config('flat_deposit.settings')->get('flat_deposit_ingest_service');
            $max_files = $ingest_service_variables['max_ingest_files'];
            $max_size = $ingest_service_variables['max_file_size'];
            $max_size_bytes = ($max_size * 1073741824);
            $allowed_extensions = explode(', ', $ingest_service_variables['allowed_extensions']);
            $filename_pattern = '/^[\da-zA-Z][\da-zA-Z\._\-]+$/';
            $max_path_length = 4000; // db entries can be 5000 chars but there seems to be some overhead
            if (strlen($dir) > $max_path_length) {
                $form_state->setErrorByName('next_nc_directories', 'The path to reach the specified Nextcloud folder is too long. Move the folder up in the hierarchy to reduce the total path length.');
                return $form;
            }
            $has_subfolders = \Nextcloud::hasSubfolders($dir);
            if ($has_subfolders) {
                $form_state->setErrorByName('next_nc_directories', 'The selected Nextcloud folder contains subfolders.');
                return $form;
            }
            if (count($files) > $max_files) {
                $errors[] = t('The selected Nextcloud folder contains too many files, the maximum is @max_files.', ['@max_files' => $max_files]);
            }
            $max_file_size_exceeded = array();
            $invalid_file_names = array();
            $invalid_file_extensions = array();
            foreach ($files as $file) {
                $path = $file->uri;
                $name = basename($path);
                $size = filesize($path);
                $extension = pathinfo($path, PATHINFO_EXTENSION);
                if ($size > $max_size_bytes) {
                    $max_file_size_exceeded[] = $name;
                }
                if (preg_match($filename_pattern, $name) == FALSE) {
                    $invalid_file_names[] = $name;
                }
                if (!in_array($extension, $allowed_extensions)) {
                    $invalid_file_extensions[] = $name;
                }
            }
            if (!empty($max_file_size_exceeded)) {
                $max_file_size_exceeded_list = implode(", ", $max_file_size_exceeded);
                $errors[] = t('The selected Nextcloud folder contains files that are larger than the maximum allowed file size of @max_size GB: @max_file_size_exceeded_list.', ['@max_size' => $max_size, '@max_file_size_exceeded_list' => $max_file_size_exceeded_list]);
            }
            if (!empty($invalid_file_names)) {
                $invalid_file_names_list = implode(", ", $invalid_file_names);
                $errors[] = t('The selected Nextcloud folder contains files that have disallowed characters in their name: @invalid_file_names_list.', ['@invalid_file_names_list' => $invalid_file_names_list]);
            }
            if (!empty($invalid_file_extensions)) {
                $invalid_file_extensions_list = implode(", ", $invalid_file_extensions);
                $errors[] = t('The selected Nextcloud folder contains files that have a disallowed file extension: @invalid_file_extensions_list. See the deposit manual for allowed file types and extensions.', ['@invalid_file_extensions_list' => $invalid_file_extensions_list]);
            }
            if (!empty($errors)) {
                $form_state->setErrorByName('next_nc_directories', implode('<br>', $errors));
                return $form;
            }
        }
    }
}

/**
 * Implements hook_data_move_actions().
 *
 * Call Nextcloud occ to re-scan parent directory of source or target after performing data move
 *
 */
function flat_nextcloud_data_move_actions($source_location, $target_location)
{

    $config = variable_get('flat_nextcloud');
    $stream_wrapper = 'nextcloud://';

    if (strpos($source_location, $stream_wrapper) === 0) {
        $path = str_replace($stream_wrapper, '', $source_location);
    } elseif (strpos($target_location, $stream_wrapper) === 0) {
        $path = str_replace($stream_wrapper, '', $target_location);
    }
    if (isset($path)) {
        $path = dirname($path);
        $cmd = $config['root_dir'] . 'occ files:scan --path="' . $path . '"';
        exec($cmd, $output, $return_val);
    }

    return true;
}

/**
 * Implements hook_node_presave()
 *
 * get value from flat_nc_path and set flat_original_path and flat_location to that value
 *
 * note! also gets called during node delete and metadata save, hence the extra checks
 *
 */
function flat_nextcloud_node_presave($node)
{
    if ($node instanceof \Drupal\node\NodeInterface) {
        if ($node->bundle() === 'flat_bundle') {
            $flat_source = $node->get('flat_source')->value;
            if ($flat_source == 'cloud') {
                $flat_nc_path = $node->get('flat_nc_path')->value;
                $node->set('flat_original_path', $flat_nc_path);
                $node->set('flat_location', $flat_nc_path);
            }
        }
    }
}

function flat_nextcloud_form_node_flat_bundle_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state)
{
    $nc_path = $form_state->getValue(['chosen_nc_path']);
    $form_state->setValue('flat_nc_path', [['value' => $nc_path]]);
}
